{
    "version": 3,
    "file": "types.js",
    "sourceRoot": "",
    "sources": [
        "/src/types.ts"
    ],
    "names": [],
    "mappings": ";;AA6IA,+EAA+E;AAC/E,uEAAuE;AACvE,4BAA4B;AAC5B,uBAAuB;AACvB,2EAA2E",
    "sourcesContent": [
        "import {SchemaApiObject} from './Schema';\n\nexport interface ApiObject extends SchemaApiObject {\n  config?: {\n    withCredentials?: boolean;\n    cancelExecutor?: (cancel: Function) => void;\n  };\n  adaptor?: (payload: object, response: fetcherResult, api: ApiObject) => any;\n  requestAdaptor?: (api: ApiObject) => ApiObject;\n}\nexport type ApiString = string;\nexport type Api = ApiString | ApiObject;\n\nexport interface fetcherResult {\n  data?: {\n    data: object;\n    status: number;\n    msg: string;\n    msgTimeout?: number;\n    errors?: {\n      [propName: string]: string;\n    };\n  };\n  status: number;\n  headers: object;\n}\n\nexport interface fetchOptions {\n  method?: 'get' | 'post' | 'put' | 'patch' | 'delete';\n  successMessage?: string;\n  errorMessage?: string;\n  autoAppend?: boolean;\n  beforeSend?: (data: any) => any;\n  onSuccess?: (json: Payload) => any;\n  silent?: boolean;\n  [propName: string]: any;\n}\n\nexport interface Payload {\n  ok: boolean;\n  msg: string;\n  msgTimeout?: number;\n  data: any;\n  status: number;\n  errors?: {\n    [propName: string]: string;\n  };\n}\n\nexport interface Schema {\n  type: string;\n  detectField?: string;\n  visibleOn?: string;\n  hiddenOn?: string;\n  children?: JSX.Element | ((props: any, schema?: any) => JSX.Element) | null;\n  definitions?: Definitions;\n  [propName: string]: any;\n}\n\nexport interface Button {\n  type: 'submit' | 'button' | 'reset';\n  label?: string;\n  icon?: string;\n  size?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport type SchemaNode = Schema | string | Array<Schema | string>;\nexport interface SchemaArray extends Array<SchemaNode> {}\nexport interface Definitions {\n  [propName: string]: SchemaNode;\n}\nexport interface Action extends Button {\n  actionType?:\n    | 'submit'\n    | 'copy'\n    | 'reload'\n    | 'ajax'\n    | 'dialog'\n    | 'drawer'\n    | 'jump'\n    | 'link'\n    | 'url'\n    | 'close'\n    | 'confirm'\n    | 'add'\n    | 'remove'\n    | 'delete'\n    | 'edit'\n    | 'cancel'\n    | 'next'\n    | 'prev'\n    | 'reset';\n  api?: Api;\n  asyncApi?: Api;\n  payload?: any;\n  dialog?: SchemaNode;\n  to?: string;\n  target?: string;\n  link?: string;\n  url?: string;\n  mergeData?: boolean;\n  reload?: string;\n  messages?: {\n    success?: string;\n    failed?: string;\n  };\n  feedback?: any;\n  required?: Array<string>;\n  [propName: string]: any;\n}\n\nexport interface Location {\n  pathname: string;\n  search: string;\n  state: any;\n  hash: string;\n  key?: string;\n  query?: any;\n}\n\nexport interface PlainObject {\n  [propsName: string]: any;\n}\n\nexport interface RendererData {\n  [propsName: string]: any;\n  __prev?: RendererDataAlias;\n  __super?: RendererData;\n}\ntype RendererDataAlias = RendererData;\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface JSONSchema {\n  [propsName: string]: any;\n}\n\n// export type Omit<T, K extends keyof T & any> = Pick<T, Exclude<keyof T, K>>;\n// export type Override<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;\n// export type ExtractProps<\n//   TComponentOrTProps\n// > = TComponentOrTProps extends React.ComponentType<infer P> ? P : never;\n"
    ]
}