{
    "version": 3,
    "file": "Button.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Button.tsx"
    ],
    "names": [],
    "mappings": ";AAAA;;;GAGG;;;;AAEH,wDAA0B;AAC1B,4EAAwE;AACxE,0CAAgD;AAChD,kCAAiD;AAwBjD;IAA4B,kCAA4B;IAAxD;;IA+FA,CAAC;IA7EC,6BAAY,GAAZ;;QACE,IAAI,KAeA,IAAI,CAAC,KAAK,EAdZ,KAAK,WAAA,EACL,IAAI,UAAA,EACJ,QAAQ,cAAA,EACR,SAAS,eAAA,EACO,IAAI,oBAAA,EACR,EAAE,gBAAA,EACd,QAAQ,cAAA,EACR,WAAW,iBAAA,EACX,KAAK,WAAA,EACL,IAAI,UAAA,EACJ,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,IAAI,UAAA,EACD,IAAI,sBAdL,oJAeH,CAAa,CAAC;QAEf,IAAI,IAAI,EAAE;YACR,IAAI,GAAG,GAAG,CAAC;SACZ;QAED,OAAO,CACL,8BAAC,IAAI,qBACH,IAAI,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IACjC,wBAAe,CAAC,IAAI,CAAC,IACzB,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,EAAE,CACX,QAAQ;gBAEN,GAAC,aAAW,KAAO,IAAG,KAAK;gBAC3B,GAAC,aAAW,IAAM,IAAG,IAAI;gBACzB,GAAC,eAAe,IAAG,KAAK;gBACxB,GAAC,kBAAkB,IAAG,QAAQ;gBAC9B,iBAAa,GAAE,QAAQ;gBACvB,eAAW,GAAE,MAAM;qBAErB,SAAS,CACV,EACD,QAAQ,EAAE,QAAQ,KAEjB,QAAQ,CACJ,CACR,CAAC;IACJ,CAAC;IAED,uBAAM,GAAN;QACQ,IAAA,KAUF,IAAI,CAAC,KAAK,EATZ,OAAO,aAAA,EACP,SAAS,eAAA,EACT,gBAAgB,sBAAA,EAChB,cAAc,oBAAA,EACd,gBAAgB,sBAAA,EAChB,QAAQ,cAAA,EACR,WAAW,iBAAA,EACX,WAAW,iBAAA,EACC,EAAE,gBACF,CAAC;QAEf,OAAO,CACL,8BAAC,wBAAc,IACb,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EACzC,SAAS,EAAE,gBAAgB,EAC3B,OAAO,EAAE,cAAc,EACvB,SAAS,EAAE,gBAAgB,IAE1B,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,CACzB,uCAAK,SAAS,EAAE,EAAE,CAAC,uBAAuB,CAAC,IACxC,IAAI,CAAC,YAAY,EAAE,CAChB,CACP,CAAC,CAAC,CAAC,CACF,IAAI,CAAC,YAAY,EAAE,CACpB,CACc,CAClB,CAAC;IACJ,CAAC;IA7FM,mBAAY,GAQf;QACF,cAAc,EAAE,QAAQ;QACxB,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,KAAK;QAChB,cAAc,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;QAClC,gBAAgB,EAAE,KAAK;KACxB,CAAC;IA+EJ,aAAC;CAAA,AA/FD,CAA4B,eAAK,CAAC,SAAS,GA+F1C;AA/FY,wBAAM;AAiGnB,kBAAe,iBAAS,CAAC,MAAM,CAAC,CAAC",
    "sourcesContent": [
        "/**\n * @file Button\n * @author fex\n */\n\nimport React from 'react';\nimport TooltipWrapper, {TooltipObject, Trigger} from './TooltipWrapper';\nimport {pickEventsProps} from '../utils/helper';\nimport {ClassNamesFn, themeable} from '../theme';\n\ninterface ButtonProps extends React.DOMAttributes<HTMLButtonElement> {\n  id?: string;\n  className?: string;\n  href?: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  type: 'button' | 'reset' | 'submit';\n  level: string; // 'link' | 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'default';\n  tooltip?: string | TooltipObject;\n  placement: 'top' | 'right' | 'bottom' | 'left';\n  tooltipContainer?: any;\n  tooltipTrigger: Trigger | Array<Trigger>;\n  tooltipRootClose: boolean;\n  disabled?: boolean;\n  active?: boolean;\n  block?: boolean;\n  iconOnly?: boolean;\n  disabledTip?: string | TooltipObject;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  componentClass: React.ReactType;\n}\n\nexport class Button extends React.Component<ButtonProps> {\n  static defaultProps: Pick<\n    ButtonProps,\n    | 'componentClass'\n    | 'level'\n    | 'type'\n    | 'placement'\n    | 'tooltipTrigger'\n    | 'tooltipRootClose'\n  > = {\n    componentClass: 'button',\n    level: 'default',\n    type: 'button',\n    placement: 'top',\n    tooltipTrigger: ['hover', 'focus'],\n    tooltipRootClose: false\n  };\n\n  renderButton() {\n    let {\n      level,\n      size,\n      disabled,\n      className,\n      componentClass: Comp,\n      classnames: cx,\n      children,\n      disabledTip,\n      block,\n      type,\n      active,\n      iconOnly,\n      href,\n      ...rest\n    } = this.props;\n\n    if (href) {\n      Comp = 'a';\n    }\n\n    return (\n      <Comp\n        type={Comp === 'a' ? undefined : type}\n        {...pickEventsProps(rest)}\n        href={href}\n        className={cx(\n          `Button`,\n          {\n            [`Button--${level}`]: level,\n            [`Button--${size}`]: size,\n            [`Button--block`]: block,\n            [`Button--iconOnly`]: iconOnly,\n            'is-disabled': disabled,\n            'is-active': active\n          },\n          className\n        )}\n        disabled={disabled}\n      >\n        {children}\n      </Comp>\n    );\n  }\n\n  render() {\n    const {\n      tooltip,\n      placement,\n      tooltipContainer,\n      tooltipTrigger,\n      tooltipRootClose,\n      disabled,\n      disabledTip,\n      classPrefix,\n      classnames: cx\n    } = this.props;\n\n    return (\n      <TooltipWrapper\n        placement={placement}\n        tooltip={disabled ? disabledTip : tooltip}\n        container={tooltipContainer}\n        trigger={tooltipTrigger}\n        rootClose={tooltipRootClose}\n      >\n        {disabled && disabledTip ? (\n          <div className={cx('Button--disabled-wrap')}>\n            {this.renderButton()}\n          </div>\n        ) : (\n          this.renderButton()\n        )}\n      </TooltipWrapper>\n    );\n  }\n}\n\nexport default themeable(Button);\n"
    ]
}