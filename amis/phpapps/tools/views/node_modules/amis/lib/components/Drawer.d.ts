/**
 * @file Drawer
 * @description
 * @author fex
 */
/// <reference types="hoist-non-react-statics" />
import React from 'react';
import { ClassNamesFn } from '../theme';
declare type DrawerPosition = 'top' | 'right' | 'bottom' | 'left';
export interface DrawerProps {
    className?: string;
    bodyClassName?: string;
    size: any;
    overlay: boolean;
    onHide: (e: any) => void;
    closeOnEsc?: boolean;
    container: any;
    show?: boolean;
    position: DrawerPosition;
    disabled?: boolean;
    closeOnOutside?: boolean;
    classPrefix: string;
    classnames: ClassNamesFn;
    onExited?: () => void;
    onEntered?: () => void;
}
export interface DrawerState {
}
export declare class Drawer extends React.Component<DrawerProps, DrawerState> {
    static defaultProps: Pick<DrawerProps, 'container' | 'position' | 'size' | 'overlay'>;
    modalDom: HTMLElement;
    contentDom: HTMLElement;
    isRootClosed: boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    contentRef: (ref: any) => any;
    handleEnter: () => void;
    handleEntered: () => void;
    handleExited: () => void;
    modalRef: (ref: any) => void;
    handleRootClickCapture(e: MouseEvent): void;
    handleRootClick(e: MouseEvent): void;
    render(): JSX.Element;
}
declare const _default: {
    new (props: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: ClassNamesFn | undefined;
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: ClassNamesFn | undefined;
    }, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "show" | "disabled" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside"> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "show" | "disabled" | "container" | "onHide" | "onEntered" | "onExited" | "closeOnEsc" | "bodyClassName" | "closeOnOutside">, "position" | "overlay" | "size" | "container">> & Partial<Pick<Pick<DrawerProps, "position" | "overlay" | "size" | "container">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType: React.Context<string>;
    ComposedComponent: typeof Drawer;
} & import("hoist-non-react-statics").NonReactStatics<typeof Drawer, {}> & {
    ComposedComponent: typeof Drawer;
};
export default _default;
