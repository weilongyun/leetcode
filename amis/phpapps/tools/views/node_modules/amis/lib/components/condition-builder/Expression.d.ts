/// <reference types="hoist-non-react-statics" />
import { ExpressionComplex, Field, Funcs, FieldSimple, OperatorType } from './types';
import React from 'react';
import { ThemeProps } from '../../theme';
import { Config } from './config';
/**
 * 支持4中表达式设置方式
 *
 * 1. 直接就是值，由用户直接填写。
 * 2. 选择字段，让用户选一个字段。
 * 3. 选择一个函数，然后会参数里面的输入情况是个递归。
 * 4. 粗暴点，函数让用户自己书写。
 */
export interface ExpressionProps extends ThemeProps {
    value: ExpressionComplex;
    index?: number;
    onChange: (value: ExpressionComplex, index?: number) => void;
    valueField?: FieldSimple;
    fields?: Field[];
    funcs?: Funcs;
    allowedTypes?: Array<'value' | 'field' | 'func' | 'formula'>;
    op?: OperatorType;
    config: Config;
}
export declare class Expression extends React.Component<ExpressionProps> {
    handleInputTypeChange(type: 'value' | 'field' | 'func' | 'formula'): void;
    handleValueChange(data: any): void;
    handleFieldChange(field: string): void;
    handleFuncChange(func: any): void;
    handleFormulaChange(formula: string): void;
    render(): JSX.Element;
}
declare const _default: {
    new (props: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: import("../../theme").ClassNamesFn | undefined;
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: import("../../theme").ClassNamesFn | undefined;
    }, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<ExpressionProps, "value" | "valueField" | "index" | "onChange" | "op" | "config" | "fields" | "funcs" | "allowedTypes"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType: React.Context<string>;
    ComposedComponent: typeof Expression;
} & import("hoist-non-react-statics").NonReactStatics<typeof Expression, {}> & {
    ComposedComponent: typeof Expression;
};
export default _default;
