/// <reference types="hoist-non-react-statics" />
import React from 'react';
import { Fields, ConditionRule, Funcs, OperatorType } from './types';
import { ThemeProps } from '../../theme';
import { Config } from './config';
export interface ConditionItemProps extends ThemeProps {
    config: Config;
    fields: Fields;
    funcs?: Funcs;
    index?: number;
    value: ConditionRule;
    onChange: (value: ConditionRule, index?: number) => void;
}
export declare class ConditionItem extends React.Component<ConditionItemProps> {
    handleLeftFieldSelect(field: any): void;
    handleLeftInputTypeChange(type: 'func' | 'field'): void;
    handleLeftChange(leftValue: any): void;
    handleOperatorChange(op: OperatorType): void;
    handleRightChange(rightValue: any): void;
    handleRightSubChange(index: number, rightValue: any): void;
    renderLeft(): JSX.Element;
    renderOperator(): JSX.Element | null;
    renderRight(): JSX.Element | null;
    renderRightWidgets(type: string, op: OperatorType): JSX.Element | null;
    render(): JSX.Element;
}
declare const _default: {
    new (props: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: import("../../theme").ClassNamesFn | undefined;
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: import("../../theme").ClassNamesFn | undefined;
    }, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<ConditionItemProps, "value" | "index" | "onChange" | "config" | "fields" | "funcs"> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: import("../../theme").ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType: React.Context<string>;
    ComposedComponent: typeof ConditionItem;
} & import("hoist-non-react-statics").NonReactStatics<typeof ConditionItem, {}> & {
    ComposedComponent: typeof ConditionItem;
};
export default _default;
