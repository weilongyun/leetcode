{
    "version": 3,
    "file": "ListCheckboxes.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/ListCheckboxes.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {BaseCheckboxes} from './Checkboxes';\nimport {themeable} from '../theme';\nimport React from 'react';\nimport {uncontrollable} from 'uncontrollable';\nimport Checkbox from './Checkbox';\nimport {Option} from './Select';\nimport {localeable} from '../locale';\n\nexport class ListCheckboxes extends BaseCheckboxes {\n  valueArray: Array<Option>;\n\n  renderOption(option: Option, index: number) {\n    const {\n      labelClassName,\n      disabled,\n      classnames: cx,\n      itemClassName,\n      itemRender\n    } = this.props;\n    const valueArray = this.valueArray;\n\n    if (Array.isArray(option.children)) {\n      return (\n        <div\n          key={index}\n          className={cx('ListCheckboxes-group', option.className)}\n        >\n          <div className={cx('ListCheckboxes-itemLabel')}>\n            {itemRender(option)}\n          </div>\n\n          <div className={cx('ListCheckboxes-items', option.className)}>\n            {option.children.map((child, index) =>\n              this.renderOption(child, index)\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        key={index}\n        className={cx(\n          'ListCheckboxes-item',\n          itemClassName,\n          option.className,\n          disabled || option.disabled ? 'is-disabled' : ''\n        )}\n        onClick={() => this.toggleOption(option)}\n      >\n        <div className={cx('ListCheckboxes-itemLabel')}>\n          {itemRender(option)}\n        </div>\n\n        <Checkbox\n          size=\"sm\"\n          checked={!!~valueArray.indexOf(option)}\n          disabled={disabled || option.disabled}\n          labelClassName={labelClassName}\n          description={option.description}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      value,\n      options,\n      className,\n      placeholder,\n      classnames: cx,\n      option2value\n    } = this.props;\n    const __ = this.props.translate;\n\n    this.valueArray = BaseCheckboxes.value2array(value, options, option2value);\n    let body: Array<React.ReactNode> = [];\n\n    if (Array.isArray(options) && options.length) {\n      body = options.map((option, key) => this.renderOption(option, key));\n    }\n\n    return (\n      <div className={cx('ListCheckboxes', className)}>\n        {body && body.length ? (\n          body\n        ) : (\n          <div className={cx('ListCheckboxes-placeholder')}>\n            {__(placeholder)}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(ListCheckboxes, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}