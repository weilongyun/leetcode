{
    "version": 3,
    "file": "Range.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Range.tsx"
    ],
    "names": [],
    "mappings": ";AAAA;;;;GAIG;;;;AAEH,wDAA0B;AAC1B,gFAA2C;AAC3C,iDAA8C;AAG9C,kCAAiD;AAkBjD;IAA2B,iCAAgC;IAA3D;;IAkCA,CAAC;IA5BC,sBAAM,GAAN;QACQ,IAAA,KAA0D,IAAI,CAAC,KAAK,EAAnE,GAAG,SAAA,EAAE,GAAG,SAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA,EAAe,EAAE,iBAAA,EAAE,QAAQ,cAAc,CAAC;QAE3E,IAAM,UAAU,GAAG;YACjB,WAAW,EAAE,QAAQ;gBACnB,CAAC,CAAI,EAAE,+BAA4B;gBACnC,CAAC,CAAI,EAAE,qBAAkB;YAC3B,kBAAkB,EAAK,EAAE,2BAAwB;YACjD,UAAU,EAAK,EAAE,eAAY;YAC7B,cAAc,EAAK,EAAE,8BAA2B;YAChD,QAAQ,EAAK,EAAE,yBAAoB,EAAE,0BAAuB;YAC5D,QAAQ,EAAK,EAAE,yBAAoB,EAAE,0BAAuB;YAC5D,MAAM,EAAK,EAAE,sBAAmB;YAChC,eAAe,EAAK,EAAE,+BAA4B;YAClD,KAAK,EAAK,EAAE,yBAAoB,EAAE,iCAA8B;YAChE,UAAU,EAAK,EAAE,yBAAoB,EAAE,4BAAyB;SACjE,CAAC;QAEF,OAAO,CACL,8BAAC,2BAAU,uBACL,IAAI,CAAC,KAAK,IACd,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,GAAG,EACb,QAAQ,EAAE,GAAG,EACb,KAAK,EAAE,KAAK,IACZ,CACH,CAAC;IACJ,CAAC;IAhCM,kBAAY,GAAwB;QACzC,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,GAAG;KACT,CAAC;IA8BJ,YAAC;CAAA,AAlCD,CAA2B,eAAK,CAAC,SAAS,GAkCzC;AAlCY,sBAAK;AAoClB,kBAAe,iBAAS,CACtB,+BAAc,CAAC,KAAK,EAAE;IACpB,KAAK,EAAE,UAAU;CAClB,CAAC,CACH,CAAC",
    "sourcesContent": [
        "/**\n * @file Range\n * @description\n * @author fex\n */\n\nimport React from 'react';\nimport InputRange from 'react-input-range';\nimport {uncontrollable} from 'uncontrollable';\nimport cx from 'classnames';\nimport {RendererProps} from '../factory';\nimport {ClassNamesFn, themeable} from '../theme';\n\ninterface RangeProps extends RendererProps {\n  id?: string;\n  className?: string;\n  min: number;\n  max: number;\n  value:\n    | {\n        min: number;\n        max: number;\n      }\n    | number;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  onChange: (value: any) => void;\n}\n\nexport class Range extends React.Component<RangeProps, any> {\n  static defaultProps: Partial<RangeProps> = {\n    min: 1,\n    max: 100\n  };\n\n  render() {\n    const {min, max, value, className, classPrefix: ns, multiple} = this.props;\n\n    const classNames = {\n      activeTrack: multiple\n        ? `${ns}InputRange-track is-active`\n        : `${ns}InputRange-track`,\n      disabledInputRange: `${ns}InputRange is-disabled`,\n      inputRange: `${ns}InputRange`,\n      labelContainer: `${ns}InputRange-labelContainer`,\n      maxLabel: `${ns}InputRange-label ${ns}InputRange-label--max`,\n      minLabel: `${ns}InputRange-label ${ns}InputRange-label--min`,\n      slider: `${ns}InputRange-slider`,\n      sliderContainer: `${ns}InputRange-sliderContainer`,\n      track: `${ns}InputRange-track ${ns}InputRange-track--background`,\n      valueLabel: `${ns}InputRange-label ${ns}InputRange-label--value`\n    };\n\n    return (\n      <InputRange\n        {...this.props}\n        classNames={classNames}\n        minValue={min}\n        maxValue={max}\n        value={value}\n      />\n    );\n  }\n}\n\nexport default themeable(\n  uncontrollable(Range, {\n    value: 'onChange'\n  })\n);\n"
    ]
}