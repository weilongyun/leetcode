/**
 * @file Editor
 * @description
 * @author fex
 */
/// <reference types="hoist-non-react-statics" />
import React from 'react';
import { ClassNamesFn } from '../theme';
export declare function monacoFactory(containerElement: HTMLElement, monaco: any, options: any): any;
export interface EditorProps {
    value?: string;
    defaultValue?: string;
    width?: number | string;
    height?: number | string;
    onChange?: (value: string, event: any) => void;
    language?: string;
    editorTheme?: string;
    options: {
        [propName: string]: any;
    };
    classPrefix: string;
    className?: string;
    classnames: ClassNamesFn;
    context?: any;
    style?: any;
    onFocus?: () => void;
    onBlur?: () => void;
    editorDidMount?: (editor: any, monaco: any) => void;
    editorWillMount?: (monaco: any) => void;
    editorWillUnmount?: (editor: any, monaco: any) => void;
    editorFactory?: (conatainer: HTMLElement, monaco: any, options: any) => any;
}
export declare class Editor extends React.Component<EditorProps, any> {
    static defaultProps: {
        language: string;
        editorTheme: string;
        width: string;
        height: string;
        options: {};
    };
    editor: any;
    container: any;
    currentValue: any;
    preventTriggerChangeEvent: boolean;
    disposes: Array<{
        dispose: () => void;
    }>;
    constructor(props: EditorProps);
    componentDidUpdate(prevProps: EditorProps): void;
    componentWillUnmount(): void;
    wrapperRef(ref: any): void;
    loadMonaco(): void;
    initMonaco(monaco: any): void;
    editorWillMount(monaco: any): void;
    editorDidMount(editor: any, monaco: any): void;
    render(): JSX.Element;
}
declare const _default: {
    new (props: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
        language: string;
        editorTheme: string;
        width: string;
        height: string;
        options: {};
    }, never>> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: ClassNamesFn | undefined;
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
        language: string;
        editorTheme: string;
        width: string;
        height: string;
        options: {};
    }, never>> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: ClassNamesFn | undefined;
    }, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "value" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory"> & Partial<Pick<Pick<EditorProps, "value" | "options" | "height" | "width" | "style" | "defaultValue" | "onFocus" | "onBlur" | "onChange" | "language" | "editorTheme" | "context" | "editorDidMount" | "editorWillMount" | "editorWillUnmount" | "editorFactory">, "options" | "height" | "width" | "language" | "editorTheme">> & Partial<Pick<{
            language: string;
            editorTheme: string;
            width: string;
            height: string;
            options: {};
        }, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType: React.Context<string>;
    ComposedComponent: typeof Editor;
} & import("hoist-non-react-statics").NonReactStatics<typeof Editor, {}> & {
    ComposedComponent: typeof Editor;
};
export default _default;
