{
    "version": 3,
    "file": "Checkboxes.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Checkboxes.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file Checkboxes\n * @description 多选输入框\n * @author fex\n */\n\nimport React from 'react';\nimport {uncontrollable} from 'uncontrollable';\nimport Checkbox from './Checkbox';\nimport chunk from 'lodash/chunk';\nimport {ClassNamesFn, themeable, ThemeProps} from '../theme';\nimport {Option, value2array, Options} from './Select';\nimport find from 'lodash/find';\nimport {autobind, findTree} from '../utils/helper';\nimport isEqual from 'lodash/isEqual';\nimport {LocaleProps, localeable} from '../locale';\n// import isPlainObject from 'lodash/isPlainObject';\n\nexport interface BaseCheckboxesProps extends ThemeProps, LocaleProps {\n  options: Options;\n  className?: string;\n  placeholder?: string;\n  value?: Array<any>;\n  onChange?: (value: Array<Option>) => void;\n  onDeferLoad?: (option: Option) => void;\n  inline?: boolean;\n  labelClassName?: string;\n  option2value?: (option: Option) => any;\n  itemClassName?: string;\n  itemRender: (option: Option) => JSX.Element;\n\n  disabled?: boolean;\n}\n\nexport class BaseCheckboxes<\n  T extends BaseCheckboxesProps = BaseCheckboxesProps,\n  S = any\n> extends React.Component<T, S> {\n  static defaultProps = {\n    placeholder: '暂无选项',\n    itemRender: (option: Option) => <span>{option.label}</span>\n  };\n\n  static value2array(\n    value: any,\n    options: Options,\n    option2value: (option: Option) => any = (option: Option) => option\n  ): Options {\n    if (value === void 0) {\n      return [];\n    }\n\n    if (!Array.isArray(value)) {\n      value = [value];\n    }\n\n    return value.map((value: any) => {\n      const option = findTree(options, option =>\n        isEqual(option2value(option), value)\n      );\n      return option || value;\n    });\n  }\n\n  toggleOption(option: Option) {\n    const {value, onChange, option2value, options, disabled} = this.props;\n\n    if (disabled || option.disabled) {\n      return;\n    }\n\n    let valueArray = BaseCheckboxes.value2array(value, options, option2value);\n    let idx = valueArray.indexOf(option);\n\n    if (~idx) {\n      valueArray.splice(idx, 1);\n    } else {\n      valueArray.push(option);\n    }\n\n    let newValue: string | Array<Option> = option2value\n      ? valueArray.map(item => option2value(item))\n      : valueArray;\n\n    onChange && onChange(newValue);\n  }\n\n  @autobind\n  toggleAll() {\n    const {value, onChange, option2value, options} = this.props;\n    let valueArray: Array<Option> = [];\n\n    if (!Array.isArray(value) || !value.length) {\n      valueArray = options.filter(option => !option.disabled);\n    }\n\n    let newValue: string | Array<Option> = option2value\n      ? valueArray.map(item => option2value(item))\n      : valueArray;\n\n    onChange && onChange(newValue);\n  }\n\n  render() {\n    const {\n      value,\n      options,\n      className,\n      placeholder,\n      inline,\n      labelClassName,\n      disabled,\n      classnames: cx,\n      option2value,\n      itemClassName,\n      itemRender\n    } = this.props;\n\n    const __ = this.props.translate;\n\n    let valueArray = BaseCheckboxes.value2array(value, options, option2value);\n    let body: Array<React.ReactNode> = [];\n\n    if (Array.isArray(options) && options.length) {\n      body = options.map((option, key) => (\n        <Checkbox\n          className={cx(itemClassName, option.className)}\n          key={key}\n          onChange={() => this.toggleOption(option)}\n          checked={!!~valueArray.indexOf(option)}\n          disabled={disabled || option.disabled}\n          labelClassName={labelClassName}\n          description={option.description}\n        >\n          {itemRender(option)}\n        </Checkbox>\n      ));\n    }\n\n    return (\n      <div\n        className={cx(\n          'Checkboxes',\n          className,\n          inline ? 'Checkboxes--inline' : ''\n        )}\n      >\n        {body && body.length ? body : <div>{__(placeholder)}</div>}\n      </div>\n    );\n  }\n}\n\nexport class Checkboxes extends BaseCheckboxes {}\n\nexport default themeable(\n  localeable(\n    uncontrollable(Checkboxes, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}