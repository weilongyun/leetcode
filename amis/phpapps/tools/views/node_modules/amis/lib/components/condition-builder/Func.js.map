{
    "version": 3,
    "file": "Func.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/condition-builder/Func.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAE1B,qCAAkD;AAClD,iFAAmD;AACnD,qEAAuC;AACvC,6CAA4D;AAC5D,mEAAqC;AACrC,kCAA8B;AAC9B,oEAAsC;AAYtC,IAAM,YAAY,GAAG,UAAC,IAAU,IAAK,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC;AAE/C;IAAmC,yCAAmC;IAAtE;;IA8FA,CAAC;IA5FC,wCAAgB,GAAhB,UAAiB,IAAY;QAC3B,IAAM,KAAK,wBAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAGD,uCAAe,GAAf,UAAgB,GAAQ,EAAE,KAAa;QACrC,IAAM,KAAK,wBAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAClE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,kCAAU,GAAV,UAAW,IAAU;QAArB,iBA0BC;QAzBO,IAAA,KAAiD,IAAI,CAAC,KAAK,EAA9C,EAAE,gBAAA,EAAE,MAAM,YAAA,EAAE,KAAK,WAAA,EAAE,KAAK,WAAA,EAAE,MAAM,YAAc,CAAC;QAElE,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,aAAa,CAAC;YAC/B,gDAAc;YACb,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAC9C,2CACG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAC9B,8BAAC,oBAAU,IACT,MAAM,EAAE,MAAM,EACd,GAAG,EAAE,KAAK,EACV,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,KAAK,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,KAAK,GACxB,UAAU,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAQ,EACpC,QAAQ,EAAE,KAAI,CAAC,eAAe,EAC9B,KAAK,EAAE,KAAK,GAEZ,CACH,EAZ+B,CAY/B,CAAC,CACE,CACP,CAAC,CAAC,CAAC,IAAI;YACR,gDAAc,CACV,CACP,CAAC;IACJ,CAAC;IAED,8BAAM,GAAN;QAAA,iBAiDC;QAhDO,IAAA,KAAiC,IAAI,CAAC,KAAK,EAA1C,KAAK,WAAA,EAAc,EAAE,gBAAA,EAAE,KAAK,WAAc,CAAC;QAClD,IAAM,IAAI,GAAG,KAAK;YAChB,CAAC,CAAC,iBAAQ,CAAC,KAAM,EAAE,UAAA,IAAI,IAAI,OAAC,IAAa,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;YAC9D,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,QAAQ,CAAC;YAC1B,8BAAC,0BAAgB,IACf,aAAa,EAAE,UAAC,EAAS;;wBAAR,OAAO,aAAA;oBAAM,OAAA,CAC5B,8BAAC,oBAAU,IACT,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,KAAK,EAChB,OAAO,EAAE,KAAM,EACf,KAAK,QAAG,IAAa,0CAAE,IAAI,EAC3B,YAAY,EAAE,YAAY,EAC1B,QAAQ,EAAE,KAAI,CAAC,gBAAgB,GAC/B,CACH,CAAA;iBAAA,IAEA,UAAC,EAAwB;oBAAvB,OAAO,aAAA,EAAE,GAAG,SAAA,EAAE,QAAQ,cAAA;gBAAM,OAAA,CAC7B,uCAAK,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC;oBACjC,8BAAC,mBAAS,IACR,SAAS,EAAE,EAAE,CACX,oBAAoB,EACpB,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAC5B,EACD,GAAG,EAAE,GAAG,EACR,UAAU,EAAE,KAAK,EACjB,MAAM,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,EACnB,cAAc,EAAE,aAAI,EACpB,aAAa,EAAE,OAAO,EACtB,WAAW,EAAC,gCAAO;wBAEnB,wCAAM,SAAS,EAAE,EAAE,CAAC,oBAAoB,CAAC;4BACvC,8BAAC,YAAI,IAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAC,MAAM,GAAG,CACjC,CACG,CACR,CACP;YAnB8B,CAmB9B,CACgB;YAElB,IAAI,CAAC,CAAC,CAAC,CACN,IAAI,CAAC,UAAU,CAAC,IAAY,CAAC,CAC9B,CAAC,CAAC,CAAC,CACF,wCAAM,SAAS,EAAE,EAAE,CAAC,cAAc,CAAC,qCAAc,CAClD,CACG,CACP,CAAC;IACJ,CAAC;IA3FD;QADC,iBAAQ;;;;yDAKR;IAGD;QADC,iBAAQ;;;;wDAMR;IAgFH,oBAAC;CAAA,AA9FD,CAAmC,eAAK,CAAC,SAAS,GA8FjD;AA9FY,sCAAa;AAgG1B,kBAAe,iBAAS,CAAC,aAAa,CAAC,CAAC",
    "sourcesContent": [
        "import React from 'react';\nimport {Func, ExpressionFunc, Field, Funcs} from './types';\nimport {ThemeProps, themeable} from '../../theme';\nimport PopOverContainer from '../PopOverContainer';\nimport ListRadios from '../ListRadios';\nimport {autobind, findTree, noop} from '../../utils/helper';\nimport ResultBox from '../ResultBox';\nimport {Icon} from '../icons';\nimport Expression from './Expression';\nimport {Config} from './config';\n\nexport interface ConditionFuncProps extends ThemeProps {\n  value: ExpressionFunc;\n  onChange: (value: ExpressionFunc) => void;\n  config: Config;\n  fields?: Field[];\n  funcs?: Funcs;\n  allowedTypes?: Array<'value' | 'field' | 'func' | 'formula'>;\n}\n\nconst option2value = (item: Func) => item.type;\n\nexport class ConditionFunc extends React.Component<ConditionFuncProps> {\n  @autobind\n  handleFuncChange(type: string) {\n    const value = {...this.props.value};\n    value.func = type;\n    this.props.onChange(value);\n  }\n\n  @autobind\n  handleArgChange(arg: any, index: number) {\n    const value = {...this.props.value};\n    value.args = Array.isArray(value.args) ? value.args.concat() : [];\n    value.args.splice(index, 1, arg);\n    this.props.onChange(value);\n  }\n\n  renderFunc(func: Func) {\n    const {classnames: cx, fields, value, funcs, config} = this.props;\n\n    return (\n      <div className={cx('CBFunc-args')}>\n        <span>(</span>\n        {Array.isArray(func.args) && func.args.length ? (\n          <div>\n            {func.args.map((item, index) => (\n              <Expression\n                config={config}\n                key={index}\n                index={index}\n                fields={fields}\n                value={value?.args[index]}\n                valueField={{type: item.type} as any}\n                onChange={this.handleArgChange}\n                funcs={funcs}\n                // allowedTypes={allowedTypes}\n              />\n            ))}\n          </div>\n        ) : null}\n        <span>)</span>\n      </div>\n    );\n  }\n\n  render() {\n    const {value, classnames: cx, funcs} = this.props;\n    const func = value\n      ? findTree(funcs!, item => (item as Func).type === value.func)\n      : null;\n\n    return (\n      <div className={cx('CBFunc')}>\n        <PopOverContainer\n          popOverRender={({onClose}) => (\n            <ListRadios\n              onClick={onClose}\n              showRadio={false}\n              options={funcs!}\n              value={(func as Func)?.type}\n              option2value={option2value}\n              onChange={this.handleFuncChange}\n            />\n          )}\n        >\n          {({onClick, ref, isOpened}) => (\n            <div className={cx('CBFunc-select')}>\n              <ResultBox\n                className={cx(\n                  'CBGroup-fieldInput',\n                  isOpened ? 'is-active' : ''\n                )}\n                ref={ref}\n                allowInput={false}\n                result={func?.label}\n                onResultChange={noop}\n                onResultClick={onClick}\n                placeholder=\"请选择字段\"\n              >\n                <span className={cx('CBGroup-fieldCaret')}>\n                  <Icon icon=\"caret\" className=\"icon\" />\n                </span>\n              </ResultBox>\n            </div>\n          )}\n        </PopOverContainer>\n\n        {func ? (\n          this.renderFunc(func as Func)\n        ) : (\n          <span className={cx('CBFunc-error')}>方法未定义</span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default themeable(ConditionFunc);\n"
    ]
}