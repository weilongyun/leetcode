{
    "version": 3,
    "file": "TabsTransfer.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/TabsTransfer.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {autobind} from '../utils/helper';\nimport Tabs, {Tab} from './Tabs';\nimport SearchBox from './SearchBox';\nimport TableCheckboxes from './TableCheckboxes';\nimport TreeCheckboxes from './TreeCheckboxes';\nimport ChainedCheckboxes from './ChainedCheckboxes';\nimport ListCheckboxes from './ListCheckboxes';\nimport {Options, Option} from './Select';\nimport Transfer, {TransferProps} from './Transfer';\nimport {themeable} from '../theme';\nimport AssociatedCheckboxes from './AssociatedCheckboxes';\nimport {localeable} from '../locale';\n\nexport interface TabsTransferProps\n  extends Omit<\n    TransferProps,\n    'selectMode' | 'columns' | 'selectRender' | 'statistics'\n  > {\n  cellRender?: (\n    column: {\n      name: string;\n      label: string;\n      [propName: string]: any;\n    },\n    option: Option,\n    colIndex: number,\n    rowIndex: number\n  ) => JSX.Element;\n}\n\nexport class TabsTransfer extends React.Component<TabsTransferProps> {\n  static defaultProps = {\n    selectTitle: '请选择',\n    resultTitle: '当前选择',\n    itemRender: (option: Option) => <span>{option.label}</span>\n  };\n\n  renderSearchResult(searchResult: Options | null) {\n    const {\n      searchResultMode,\n      noResultsText,\n      searchResultColumns,\n      classnames: cx,\n      value,\n      disabled,\n      onChange,\n      option2value,\n      cellRender\n    } = this.props;\n    const options = searchResult || [];\n    const mode = searchResultMode;\n\n    return mode === 'table' ? (\n      <TableCheckboxes\n        placeholder={noResultsText}\n        className={cx('Transfer-checkboxes')}\n        columns={searchResultColumns!}\n        options={options}\n        value={value}\n        disabled={disabled}\n        onChange={onChange}\n        option2value={option2value}\n        cellRender={cellRender}\n      />\n    ) : mode === 'tree' ? (\n      <TreeCheckboxes\n        placeholder={noResultsText}\n        className={cx('Transfer-checkboxes')}\n        options={options}\n        value={value}\n        disabled={disabled}\n        onChange={onChange}\n        option2value={option2value}\n      />\n    ) : mode === 'chained' ? (\n      <ChainedCheckboxes\n        placeholder={noResultsText}\n        className={cx('Transfer-checkboxes')}\n        options={options}\n        value={value}\n        disabled={disabled}\n        onChange={onChange}\n        option2value={option2value}\n      />\n    ) : (\n      <ListCheckboxes\n        placeholder={noResultsText}\n        className={cx('Transfer-checkboxes')}\n        options={options}\n        value={value}\n        disabled={disabled}\n        onChange={onChange}\n        option2value={option2value}\n      />\n    );\n  }\n\n  @autobind\n  renderSelect({onSearch, onSearchCancel, searchResult}: any) {\n    const {\n      options,\n      placeholder,\n      classnames: cx,\n      value,\n      disabled,\n      onChange,\n      onSearch: searchable,\n      option2value,\n      onDeferLoad,\n      cellRender,\n      translate: __\n    } = this.props;\n\n    if (!Array.isArray(options) || !options.length) {\n      return (\n        <div className={cx('TabsTransfer-placeholder')}>\n          {__(placeholder || '暂无选项')}\n        </div>\n      );\n    }\n\n    return (\n      <Tabs\n        mode=\"card\"\n        className={cx('Transfer-tabs')}\n        activeKey={searchResult !== null ? 0 : undefined}\n        toolbar={\n          searchable ? (\n            <>\n              <span className={cx('TabsTransfer-tabsMid')}></span>\n              <SearchBox onSearch={onSearch} onCancel={onSearchCancel} />\n            </>\n          ) : null\n        }\n      >\n        {searchResult !== null\n          ? [\n              <Tab title={__('搜索结果')} key={0} eventKey={0}>\n                {this.renderSearchResult(searchResult)}\n              </Tab>\n            ]\n          : options.map((option, index) => (\n              <Tab\n                eventKey={index}\n                key={index}\n                title={option.label || option.title}\n              >\n                {option.selectMode === 'table' ? (\n                  <TableCheckboxes\n                    className={cx('Transfer-checkboxes')}\n                    columns={option.columns as any}\n                    options={option.children || []}\n                    value={value}\n                    disabled={disabled}\n                    onChange={onChange}\n                    option2value={option2value}\n                    onDeferLoad={onDeferLoad}\n                    cellRender={cellRender}\n                  />\n                ) : option.selectMode === 'tree' ? (\n                  <TreeCheckboxes\n                    className={cx('Transfer-checkboxes')}\n                    options={option.children || []}\n                    value={value}\n                    disabled={disabled}\n                    onChange={onChange}\n                    option2value={option2value}\n                    onDeferLoad={onDeferLoad}\n                  />\n                ) : option.selectMode === 'chained' ? (\n                  <ChainedCheckboxes\n                    className={cx('Transfer-checkboxes')}\n                    options={option.children || []}\n                    value={value}\n                    disabled={disabled}\n                    onChange={onChange}\n                    option2value={option2value}\n                    onDeferLoad={onDeferLoad}\n                    defaultSelectedIndex={option.defaultSelectedIndex}\n                  />\n                ) : option.selectMode === 'associated' ? (\n                  <AssociatedCheckboxes\n                    className={cx('Transfer-checkboxes')}\n                    options={option.children || []}\n                    value={value}\n                    disabled={disabled}\n                    onChange={onChange}\n                    option2value={option2value}\n                    onDeferLoad={onDeferLoad}\n                    leftMode={option.leftMode}\n                    leftOptions={option.leftOptions}\n                    leftDefaultValue={option.leftDefaultValue}\n                  />\n                ) : (\n                  <ListCheckboxes\n                    className={cx('Transfer-checkboxes')}\n                    options={option.children || []}\n                    value={value}\n                    disabled={disabled}\n                    onChange={onChange}\n                    option2value={option2value}\n                    onDeferLoad={onDeferLoad}\n                  />\n                )}\n              </Tab>\n            ))}\n      </Tabs>\n    );\n  }\n\n  render() {\n    const {className, classnames: cx} = this.props;\n\n    return (\n      <Transfer\n        {...this.props}\n        statistics={false}\n        className={cx('TabsTransfer', className)}\n        selectRender={this.renderSelect}\n      />\n    );\n  }\n}\n\nexport default themeable(localeable(TabsTransfer));\n"
    ]
}