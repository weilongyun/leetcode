{
    "version": 3,
    "file": "Input.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Input.tsx"
    ],
    "names": [],
    "mappings": ";;;AAAA;;;;GAIG;AACH,wDAA0B;AAC1B,0CAAyC;AAWzC;IAAyB,sCAAuC;IAAhE;QAAA,qEA+CC;QA9CC,qBAAe,GAAY,KAAK,CAAC;QACjC,WAAK,GAAG,EAAC,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,KAAK,EAAC,CAAC;;IA6CpC,CAAC;IA3CC,8CAAyB,GAAzB,UAA0B,SAAqB;QAC7C,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,EAAE,SAAS,CAAC,KAAK;aACvB,CAAC,CAAC;SACJ;IACH,CAAC;IAGD,sCAAiB,GAAjB,UAAkB,CAA2C;QAC3D,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,YAAY,CAAC,CAAQ,CAAC,CAAC;SAC7B;IACH,CAAC;IAGD,iCAAY,GAAZ,UAAa,CAAsC;QAC1C,IAAA,QAAQ,GAAI,IAAI,CAAC,KAAK,SAAd,CAAe;QAC9B,IAAM,KAAK,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC;QAEpC,IAAI,CAAC,eAAe,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,CAAC;YACZ,KAAK,OAAA;SACN,CAAC,CAAC;IACL,CAAC;IAED,2BAAM,GAAN;QACE,IAAM,KAA0B,IAAI,CAAC,KAAK,EAAnC,YAAY,kBAAA,EAAK,IAAI,sBAAtB,gBAAuB,CAAa,CAAC;QAE3C,OAAO,CACL,0DACE,IAAI,EAAC,MAAM,IACP,IAAI,IACR,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,GAAG,EAAE,YAAY,EACjB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,kBAAkB,EAAE,IAAI,CAAC,iBAAiB,EAC1C,mBAAmB,EAAE,IAAI,CAAC,iBAAiB,EAC3C,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,IACxC,CACH,CAAC;IACJ,CAAC;;IAjCD;QADC,iBAAQ;;qEACY,eAAK,oBAAL,eAAK,CAAC,gBAAgB;;uDAK1C;IAGD;QADC,iBAAQ;;qEACO,eAAK,oBAAL,eAAK,CAAC,WAAW;;kDAQhC;IAkBH,iBAAC;CAAA,AA/CD,CAAyB,eAAK,CAAC,SAAS,GA+CvC;AAED,kBAAe,eAAK,CAAC,UAAU,CAAmB,UAAC,KAAK,EAAE,GAAG;IAC3D,OAAO,8BAAC,UAAU,uBAAK,KAAK,IAAE,YAAY,EAAE,GAAG,IAAI,CAAC;AACtD,CAAC,CAEA,CAAC",
    "sourcesContent": [
        "/**\n * @file 这个 Input 与系统默认的 input 不同的地方在于，\n * 中文输入过程中不会触发 onChange 事件。对于 autoComplete\n * 功能很有必要。\n */\nimport React from 'react';\nimport {autobind} from '../utils/helper';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  forwardedRef: React.Ref<HTMLInputElement>;\n}\n\nexport interface InputState {\n  value: any;\n}\n\nclass InputInner extends React.Component<InputProps, InputState> {\n  isOnComposition: boolean = false;\n  state = {value: this.props.value};\n\n  componentWillReceiveProps(nextProps: InputProps) {\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  }\n\n  @autobind\n  handleComposition(e: React.CompositionEvent<HTMLInputElement>) {\n    this.isOnComposition = e.type !== 'compositionend';\n    if (!this.isOnComposition) {\n      this.handleChange(e as any);\n    }\n  }\n\n  @autobind\n  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const {onChange} = this.props;\n    const value = e.currentTarget.value;\n\n    this.isOnComposition || (onChange && onChange(e));\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    const {forwardedRef, ...rest} = this.props;\n\n    return (\n      <input\n        type=\"text\"\n        {...rest}\n        value={this.state.value}\n        ref={forwardedRef}\n        onChange={this.handleChange}\n        onCompositionStart={this.handleComposition}\n        onCompositionUpdate={this.handleComposition}\n        onCompositionEnd={this.handleComposition}\n      />\n    );\n  }\n}\n\nexport default React.forwardRef<HTMLInputElement>((props, ref) => {\n  return <InputInner {...props} forwardedRef={ref} />;\n}) as React.ComponentType<\n  React.InputHTMLAttributes<HTMLInputElement> & {ref?: any}\n>;\n"
    ]
}