{
    "version": 3,
    "file": "TableCheckboxes.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/TableCheckboxes.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {BaseCheckboxes, BaseCheckboxesProps} from './Checkboxes';\nimport {themeable} from '../theme';\nimport React from 'react';\nimport {uncontrollable} from 'uncontrollable';\nimport Checkbox from './Checkbox';\nimport {Option} from './Select';\nimport {resolveVariable} from '../utils/tpl-builtin';\nimport {localeable} from '../locale';\n\nexport interface TableCheckboxesProps extends BaseCheckboxesProps {\n  columns: Array<{\n    name: string;\n    label: string;\n    [propName: string]: any;\n  }>;\n  cellRender: (\n    column: {\n      name: string;\n      label: string;\n      [propName: string]: any;\n    },\n    option: Option,\n    colIndex: number,\n    rowIndex: number\n  ) => JSX.Element;\n}\n\nexport class TableCheckboxes extends BaseCheckboxes<TableCheckboxesProps> {\n  static defaultProps = {\n    ...BaseCheckboxes.defaultProps,\n    cellRender: (\n      column: {\n        name: string;\n        label: string;\n        [propName: string]: any;\n      },\n      option: Option,\n      colIndex: number,\n      rowIndex: number\n    ) => <span>{resolveVariable(column.name, option)}</span>\n  };\n\n  getColumns() {\n    let columns = this.props.columns;\n\n    if (!Array.isArray(columns) || !columns.length) {\n      columns = [{label: 'Label', name: 'label'}];\n    }\n    return columns;\n  }\n\n  renderTHead() {\n    const {options, classnames: cx, value, disabled, option2value} = this.props;\n    let columns = this.getColumns();\n    let valueArray = BaseCheckboxes.value2array(value, options, option2value);\n    const availableOptions = options.filter(option => !option.disabled);\n    let partialChecked = false;\n    let allChecked = !!availableOptions.length;\n\n    availableOptions.forEach(option => {\n      const isIn = !!~valueArray.indexOf(option);\n\n      if (isIn && !partialChecked) {\n        partialChecked = true;\n      } else if (!isIn && allChecked) {\n        allChecked = false;\n      }\n    });\n\n    return (\n      <thead>\n        <tr>\n          {Array.isArray(options) && options.length ? (\n            <th className={cx('Table-checkCell')}>\n              <Checkbox\n                size=\"sm\"\n                disabled={disabled}\n                onChange={this.toggleAll}\n                checked={partialChecked}\n                partial={partialChecked && !allChecked}\n              />\n            </th>\n          ) : null}\n          {columns.map((column, index) => (\n            <th key={index}>{column.label}</th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n\n  renderTBody() {\n    const {\n      options,\n      placeholder,\n      classnames: cx,\n      cellRender,\n      value,\n      disabled,\n      option2value,\n      translate: __\n    } = this.props;\n    const columns = this.getColumns();\n    let valueArray = BaseCheckboxes.value2array(value, options, option2value);\n\n    return (\n      <tbody>\n        {Array.isArray(options) && options.length ? (\n          options.map((option, rowIndex) => {\n            const checked = valueArray.indexOf(option) !== -1;\n\n            return (\n              <tr\n                key={rowIndex}\n                onClick={e => e.defaultPrevented || this.toggleOption(option)}\n              >\n                <td className={cx('Table-checkCell')}>\n                  <Checkbox size=\"sm\" checked={checked} disabled={disabled} />\n                </td>\n                {columns.map((column, colIndex) => (\n                  <td key={colIndex}>\n                    {cellRender(column, option, colIndex, rowIndex)}\n                  </td>\n                ))}\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan={columns.length}>{__(placeholder)}</td>\n          </tr>\n        )}\n      </tbody>\n    );\n  }\n\n  render() {\n    const {\n      value,\n      options,\n      className,\n      labelClassName,\n      disabled,\n      classnames: cx,\n      option2value,\n      itemClassName,\n      itemRender\n    } = this.props;\n\n    let valueArray = BaseCheckboxes.value2array(value, options, option2value);\n    let body: Array<React.ReactNode> = [];\n\n    if (Array.isArray(options) && options.length) {\n      body = options.map((option, key) => (\n        <div\n          key={key}\n          className={cx(\n            'TableCheckboxes-item',\n            itemClassName,\n            option.className,\n            disabled || option.disabled ? 'is-disabled' : ''\n          )}\n          onClick={() => this.toggleOption(option)}\n        >\n          <div className={cx('TableCheckboxes-itemLabel')}>\n            {itemRender(option)}\n          </div>\n\n          <Checkbox\n            size=\"sm\"\n            checked={!!~valueArray.indexOf(option)}\n            disabled={disabled || option.disabled}\n            labelClassName={labelClassName}\n            description={option.description}\n          />\n        </div>\n      ));\n    }\n\n    return (\n      <div className={cx('TableCheckboxes', className)}>\n        <div className={cx('Table-content')}>\n          <table className={cx('Table-table')}>\n            {this.renderTHead()}\n            {this.renderTBody()}\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(TableCheckboxes, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}