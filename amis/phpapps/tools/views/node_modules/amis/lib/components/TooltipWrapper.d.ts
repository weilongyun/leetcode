/**
 * @file TooltipWrapper
 * @description
 * @author fex
 */
/// <reference types="node" />
/// <reference types="hoist-non-react-statics" />
import React from 'react';
import { ClassNamesFn } from '../theme';
export interface TooltipObject {
    title?: string;
    content?: string;
    render?: () => JSX.Element;
    dom?: JSX.Element;
}
export declare type Trigger = 'hover' | 'click' | 'focus';
export interface TooltipWrapperProps {
    classPrefix: string;
    classnames: ClassNamesFn;
    placement: 'top' | 'right' | 'bottom' | 'left';
    tooltip?: string | TooltipObject;
    container?: React.ReactNode;
    trigger: Trigger | Array<Trigger>;
    rootClose: boolean;
    overlay?: any;
    delay: number;
    theme?: string;
    tooltipClassName?: string;
}
interface TooltipWrapperState {
    show?: boolean;
}
export declare class TooltipWrapper extends React.Component<TooltipWrapperProps, TooltipWrapperState> {
    static defaultProps: Pick<TooltipWrapperProps, 'placement' | 'trigger' | 'rootClose' | 'delay'>;
    target: HTMLElement;
    timer: NodeJS.Timeout;
    moutned: boolean;
    constructor(props: TooltipWrapperProps);
    componentWillUnmount(): void;
    getTarget(): Element | Text | null;
    show(): void;
    hide(): void;
    getChildProps(): any;
    handleShow(): void;
    handleHide(): void;
    handleFocus(e: any): void;
    handleBlur(e: any): void;
    handleMouseOver(e: any): void;
    handleMouseOut(e: any): void;
    handleMouseOverOut(handler: Function, e: React.MouseEvent<HTMLElement>, relatedNative: string): void;
    handleClick(e: any): void;
    render(): {} | null | undefined;
}
declare const _default: {
    new (props: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: ClassNamesFn | undefined;
    }>): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
        theme?: string | undefined;
        className?: string | undefined;
        classPrefix?: string | undefined;
        classnames?: ClassNamesFn | undefined;
    }, context?: any): {
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "overlay" | "tooltip" | "container" | "tooltipClassName"> & Partial<Pick<Pick<TooltipWrapperProps, "overlay" | "tooltip" | "container" | "placement" | "rootClose" | "trigger" | "delay" | "tooltipClassName">, "placement" | "rootClose" | "trigger" | "delay">> & Partial<Pick<Pick<TooltipWrapperProps, "placement" | "rootClose" | "trigger" | "delay">, never>> & {
            theme?: string | undefined;
            className?: string | undefined;
            classPrefix?: string | undefined;
            classnames?: ClassNamesFn | undefined;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType: React.Context<string>;
    ComposedComponent: typeof TooltipWrapper;
} & import("hoist-non-react-statics").NonReactStatics<typeof TooltipWrapper, {}> & {
    ComposedComponent: typeof TooltipWrapper;
};
export default _default;
