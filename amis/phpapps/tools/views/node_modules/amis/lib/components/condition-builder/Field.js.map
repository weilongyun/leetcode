{
    "version": 3,
    "file": "Field.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/condition-builder/Field.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAC1B,iFAAmD;AACnD,qEAAuC;AACvC,mEAAqC;AACrC,qCAAgE;AAChE,kCAA8B;AAC9B,6CAAkD;AAQlD,IAAM,YAAY,GAAG,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,IAAI,EAAT,CAAS,CAAC;AAE9C,SAAgB,cAAc,CAAC,EAKT;QAJpB,OAAO,aAAA,EACP,QAAQ,cAAA,EACR,KAAK,WAAA,EACO,EAAE,gBAAA;IAEd,OAAO,CACL,8BAAC,0BAAgB,IACf,aAAa,EAAE,UAAC,EAAS;gBAAR,OAAO,aAAA;YAAM,OAAA,CAC5B,8BAAC,oBAAU,IACT,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,KAAK,EAChB,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,YAAY,EAC1B,QAAQ,EAAE,QAAQ,GAClB,CACH;QAT6B,CAS7B,IAEA,UAAC,EAAwB;;YAAvB,OAAO,aAAA,EAAE,GAAG,SAAA,EAAE,QAAQ,cAAA;QAAM,OAAA,CAC7B,uCAAK,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC;YACjC,8BAAC,mBAAS,IACR,SAAS,EAAE,EAAE,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAChE,GAAG,EAAE,GAAG,EACR,UAAU,EAAE,KAAK,EACjB,MAAM,EACJ,KAAK,CAAC,CAAC,OAAC,iBAAQ,CAAC,OAAO,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,KAAK,EAAnB,CAAmB,CAAC,0CAAE,KAAK,CAAC,CAAC,CAAC,EAAE,EAEpE,cAAc,EAAE,aAAI,EACpB,aAAa,EAAE,OAAO,EACtB,WAAW,EAAC,gCAAO;gBAEnB,wCAAM,SAAS,EAAE,EAAE,CAAC,oBAAoB,CAAC;oBACvC,8BAAC,YAAI,IAAC,IAAI,EAAC,OAAO,EAAC,SAAS,EAAC,MAAM,GAAG,CACjC,CACG,CACR,CACP,CAAA;KAAA,CACgB,CACpB,CAAC;AACJ,CAAC;AAxCD,wCAwCC;AAED,kBAAe,iBAAS,CAAC,cAAc,CAAC,CAAC",
    "sourcesContent": [
        "import React from 'react';\nimport PopOverContainer from '../PopOverContainer';\nimport ListRadios from '../ListRadios';\nimport ResultBox from '../ResultBox';\nimport {ClassNamesFn, ThemeProps, themeable} from '../../theme';\nimport {Icon} from '../icons';\nimport {findTree, noop} from '../../utils/helper';\n\nexport interface ConditionFieldProps extends ThemeProps {\n  options: Array<any>;\n  value: any;\n  onChange: (value: any) => void;\n}\n\nconst option2value = (item: any) => item.name;\n\nexport function ConditionField({\n  options,\n  onChange,\n  value,\n  classnames: cx\n}: ConditionFieldProps) {\n  return (\n    <PopOverContainer\n      popOverRender={({onClose}) => (\n        <ListRadios\n          onClick={onClose}\n          showRadio={false}\n          options={options}\n          value={value}\n          option2value={option2value}\n          onChange={onChange}\n        />\n      )}\n    >\n      {({onClick, ref, isOpened}) => (\n        <div className={cx('CBGroup-field')}>\n          <ResultBox\n            className={cx('CBGroup-fieldInput', isOpened ? 'is-active' : '')}\n            ref={ref}\n            allowInput={false}\n            result={\n              value ? findTree(options, item => item.name === value)?.label : ''\n            }\n            onResultChange={noop}\n            onResultClick={onClick}\n            placeholder=\"请选择字段\"\n          >\n            <span className={cx('CBGroup-fieldCaret')}>\n              <Icon icon=\"caret\" className=\"icon\" />\n            </span>\n          </ResultBox>\n        </div>\n      )}\n    </PopOverContainer>\n  );\n}\n\nexport default themeable(ConditionField);\n"
    ]
}