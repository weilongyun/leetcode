{
    "version": 3,
    "file": "Schema.js",
    "sourceRoot": "",
    "sources": [
        "/src/Schema.ts"
    ],
    "names": [],
    "mappings": ";;;AAAA,yCAA4C;AAyapC,2FAzaA,iBAAU,OAyaA",
    "sourcesContent": [
        "import {PageSchema} from './renderers/Page';\nimport {TplSchema} from './renderers/Tpl';\nimport {RemarkSchema} from './renderers/Remark';\nimport {ActionSchema} from './renderers/Action';\nimport {AlertSchema} from './renderers/Alert';\nimport {AudioSchema} from './renderers/Audio';\nimport {ButtonGroupSchema} from './renderers/ButtonGroup';\nimport {ButtonToolbarSchema} from './renderers/ButtonToolbar';\nimport {CardSchema} from './renderers/Card';\nimport {CardsSchema} from './renderers/Cards';\nimport {FormSchema} from './renderers/Form';\nimport {CarouselSchema} from './renderers/Carousel';\nimport {ChartSchema} from './renderers/Chart';\nimport {CollapseSchema} from './renderers/Collapse';\nimport {ColorSchema} from './renderers/Color';\nimport {ContainerSchema} from './renderers/Container';\nimport {CRUDSchema} from './renderers/CRUD';\nimport {DateSchema} from './renderers/Date';\nimport {DividerSchema} from './renderers/Divider';\nimport {DropdownButtonSchema} from './renderers/DropDownButton';\nimport {EachSchema} from './renderers/Each';\nimport {GridSchema} from './renderers/Grid';\nimport {HBoxSchema} from './renderers/HBox';\nimport {IconSchema} from './renderers/Icon';\nimport {IFrameSchema} from './renderers/IFrame';\nimport {ImageSchema} from './renderers/Image';\nimport {ImagesSchema} from './renderers/Images';\nimport {JsonSchema} from './renderers/Json';\nimport {LinkSchema} from './renderers/Link';\nimport {ListSchema} from './renderers/List';\nimport {MappingSchema} from './renderers/Mapping';\nimport {NavSchema} from './renderers/Nav';\nimport {OperationSchema} from './renderers/Operation';\nimport {PanelSchema} from './renderers/Panel';\nimport {PlainSchema} from './renderers/Plain';\nimport {ProgressSchema} from './renderers/Progress';\nimport {QRCodeSchema} from './renderers/QRCode';\nimport {ServiceSchema} from './renderers/Service';\nimport {StatusSchema} from './renderers/Status';\nimport {SwitchSchema} from './renderers/Switch';\nimport {TabsSchema} from './renderers/Tabs';\nimport {TasksSchema} from './renderers/Tasks';\nimport {VBoxSchema} from './renderers/VBox';\nimport {VideoSchema} from './renderers/Video';\nimport {WizardSchema} from './renderers/Wizard';\nimport {WrapperSchema} from './renderers/Wrapper';\nimport {TableSchema} from './renderers/Table';\nimport {DialogSchema} from './renderers/Dialog';\nimport {DrawerSchema} from './renderers/Drawer';\nimport {SearchBoxSchema} from './renderers/SearchBox';\n\n// 每加个类型，这补充一下。\nexport type SchemaType =\n  | 'form'\n  | 'button'\n  | 'submit'\n  | 'reset'\n  | 'alert'\n  | 'audio'\n  | 'button-group'\n  | 'button-toolbar'\n  | 'card'\n  | 'cards'\n  | 'carousel'\n  | 'chart'\n  | 'collapse'\n  | 'color'\n  | 'container'\n  | 'crud'\n  | 'date'\n  | 'static-date' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'datetime'\n  | 'static-datetime' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'time'\n  | 'static-time' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'month'\n  | 'static-month' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'dialog'\n  | 'divider'\n  | 'dropdown-button'\n  | 'drawer'\n  | 'each'\n  | 'grid'\n  | 'hbox'\n  | 'icon'\n  | 'iframe'\n  | 'image'\n  | 'static-image' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'images'\n  | 'static-images' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'json'\n  | 'static-json' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'link'\n  | 'list'\n  | 'static-list' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'map'\n  | 'mapping'\n  | 'nav'\n  | 'page'\n  | 'operation'\n  | 'panel'\n  | 'plain'\n  | 'text'\n  | 'progress'\n  | 'qrcode'\n  | 'qr-code'\n  | 'remark'\n  | 'search-box'\n  | 'service'\n  | 'status'\n  | 'switch'\n  | 'table'\n  | 'static-table' // 这个几个跟表单项同名，再form下面用必须带前缀 static-\n  | 'tabs'\n  | 'html'\n  | 'tpl'\n  | 'tasks'\n  | 'vbox'\n  | 'video'\n  | 'wizard'\n  | 'wrapper';\n\nexport type SchemaObject =\n  | PageSchema\n  | TplSchema\n  | RemarkSchema\n  | ActionSchema\n  | AlertSchema\n  | AudioSchema\n  | ButtonGroupSchema\n  | ButtonToolbarSchema\n  | CardSchema\n  | CardsSchema\n  | CarouselSchema\n  | ChartSchema\n  | CollapseSchema\n  | ColorSchema\n  | ContainerSchema\n  | CRUDSchema\n  | DateSchema\n  | DialogSchema\n  | DividerSchema\n  | DrawerSchema\n  | DropdownButtonSchema\n  | EachSchema\n  | GridSchema\n  | HBoxSchema\n  | IconSchema\n  | IFrameSchema\n  | ImageSchema\n  | ImagesSchema\n  | JsonSchema\n  | LinkSchema\n  | ListSchema\n  | MappingSchema\n  | NavSchema\n  | OperationSchema\n  | PanelSchema\n  | PlainSchema\n  | ProgressSchema\n  | QRCodeSchema\n  | SearchBoxSchema\n  | ServiceSchema\n  | StatusSchema\n  | SwitchSchema\n  | TableSchema\n  | TabsSchema\n  | TasksSchema\n  | VBoxSchema\n  | VideoSchema\n  | WizardSchema\n  | WrapperSchema\n  | FormSchema;\n\nexport type SchemaCollection =\n  | SchemaObject\n  | SchemaTpl\n  | Array<SchemaObject | SchemaTpl>;\n\n/**\n * 表达式，语法 `data.xxx > 5`。\n */\nexport type SchemaExpression = string;\n\n// /**\n//  * css类名，配置字符串，或者对象。\n//  *\n//  *     className: \"red\"\n//  *\n//  * 用对象配置时意味着你能跟表达式一起搭配使用，如：\n//  *\n//  *     className: {\n//  *         \"red\": \"data.progress > 80\",\n//  *         \"blue\": \"data.progress > 60\"\n//  *     }\n//  */\n// export type SchemaClassName =\n//   | string\n//   | {\n//       [propName: string]: true | false | null | SchemaExpression;\n//     };\n\n/**\n * css类名，字符串格式\n */\nexport type SchemaClassName = string; // todo 支持上面那种格式。\n\nexport interface SchemaApiObject {\n  /**\n   * API 发送类型\n   */\n  method?: 'get' | 'post' | 'put' | 'delete' | 'patch';\n\n  /**\n   * API 发送目标地址\n   */\n  url: SchemaUrlPath;\n\n  /**\n   * 用来控制携带数据. 当key 为 `&` 值为 `$$` 时, 将所有原始数据打平设置到 data 中. 当值为 $$ 将所有原始数据赋值到对应的 key 中. 当值为 $ 打头时, 将变量值设置到 key 中.\n   */\n  data?: {\n    [propName: string]: any;\n  };\n\n  /**\n   * 如果 method 为 get 的接口，设置了 data 信息。\n   * 默认 data 会自动附带在 query 里面发送给后端。\n   *\n   * 如果想通过 body 发送给后端，那么请把这个配置成 false。\n   *\n   * 但是，浏览器还不支持啊，设置了只是摆设。\n   */\n  attachDataToQuery?: boolean;\n\n  /**\n   * 发送体的格式\n   */\n  dataType?: 'json' | 'form-data' | 'form';\n\n  /**\n   * 如果是文件下载接口，请配置这个。\n   */\n  responseType?: 'blob';\n\n  /**\n   * 携带 headers，用法和 data 一样，可以用变量。\n   */\n  headers?: {\n    [propName: string]: string;\n  };\n\n  /**\n   * 设置发送条件\n   */\n  sendOn?: SchemaExpression;\n\n  /**\n   * 默认都是追加模式，如果想完全替换把这个配置成 true\n   */\n  replaceData?: boolean;\n\n  /**\n   * 是否自动刷新，当 url 中的取值结果变化时，自动刷新数据。\n   */\n  autoRefresh?: boolean;\n\n  /**\n   * 如果设置了值，同一个接口，相同参数，指定的时间（单位：ms）内请求将直接走缓存。\n   */\n  cache?: number;\n\n  /**\n   * qs 配置项\n   */\n  qsOptions?: {\n    arrayFormat?: 'indices' | 'brackets' | 'repeat' | 'comma';\n    indices?: boolean;\n    allowDots?: boolean;\n  };\n}\n\nexport type SchemaApi = string | SchemaApiObject;\n\n/**\n * 组件名字，这个名字可以用来定位，用于组件通信\n */\nexport type SchemaName = string;\n\n/**\n * 配置刷新动作，这个动作通常在完成渲染器本省的固定动作后出发。\n *\n * 一般用来配置目标组件的 name 属性。多个目标可以用逗号隔开。\n *\n * 当目标是 windows 时表示刷新整个页面。\n *\n * 刷新目标的同时还支持传递参数如： `foo?a=${a}&b=${b},boo?c=${c}`\n */\nexport type SchemaReload = string;\n\n/**\n * 页面跳转地址，支持相对地址。\n */\nexport type SchemaRedirect = string;\n\n/**\n * 支持两种语法，但是不能混着用。分别是：\n *\n * 1. `${xxx}` 或者 `${xxx|upperCase}`\n * 2. `<%= data.xxx %>`\n *\n *\n * 更多文档：https://baidu.gitee.io/amis/docs/concepts/template\n */\nexport type SchemaTpl = string;\n\n/**\n * 初始数据，设置得值可用于组件内部模板使用。\n */\nexport type SchemaDefaultData = {\n  [propName: string]: any;\n};\n\n/**\n * 用来关联 json schema 的，不用管。\n */\nexport type SchemaSchema = string;\n\n/**\n * iconfont 里面的类名。\n */\nexport type SchemaIcon = string;\n\nexport type SchemaTokenizeableString = string;\n\nexport type SchemaUrlPath = SchemaTokenizeableString;\n\nexport type SchemaTooltip =\n  | string\n  | {\n      /**\n       * 标题\n       */\n      title?: string;\n\n      /**\n       * 内容\n       */\n      content: string;\n    };\n\n/**\n * 消息文案配置，记住这个优先级是最低的，如果你的接口返回了 msg，接口返回的优先。\n */\nexport type SchemaMessage = {\n  /**\n   * 获取失败时的提示\n   */\n  fetchFailed?: string;\n\n  /**\n   * 获取成功的提示，默认为空。\n   */\n  fetchSuccess?: string;\n\n  /**\n   * 保存失败时的提示。\n   */\n  saveFailed?: string;\n\n  /**\n   * 保存成功时的提示。\n   */\n  saveSuccess?: string;\n};\n\nexport type SchemaFunction = string | Function;\n\nexport interface BaseSchema {\n  type: SchemaType;\n\n  /**\n   * 容器 css 类名\n   */\n  className?: SchemaClassName;\n\n  /**\n   * 配合 definitions 一起使用，可以实现无限循环的渲染器。\n   */\n  $ref?: string;\n\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n\n  /**\n   * 是否禁用表达式\n   */\n  disabledOn?: SchemaExpression;\n\n  /**\n   * 是否隐藏\n   * @deprecated 推荐用 visible\n   */\n  hidden?: boolean;\n\n  /**\n   * 是否隐藏表达式\n   * @deprecated 推荐用 visibleOn\n   */\n  hiddenOn?: SchemaExpression;\n\n  /**\n   * 是否显示\n   */\n\n  visible?: boolean;\n\n  /**\n   * 是否显示表达式\n   */\n  visibleOn?: SchemaExpression;\n}\n\nexport {PageSchema};\n"
    ]
}