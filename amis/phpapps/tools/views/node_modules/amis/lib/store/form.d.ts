/// <reference types="lodash" />
import { IFormItemStore } from './formItem';
import { Api, fetchOptions, Payload } from '../types';
export declare const FormStore: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    path: import("mobx-state-tree").IType<string | undefined, string, string>;
    storeType: import("mobx-state-tree").ISimpleType<string>;
    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
} & {
    hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
} & {
    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
    error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
} & {
    inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    persistData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    readonly parentStore: any;
    readonly __: any;
} & {
    onChildStoreDispose(child: any): void;
    dispose: (callback?: (() => void) | undefined) => void;
    addChildId: (id: string) => void;
    removeChildId: (id: string) => void;
} & {
    initData(data?: object): void;
    reset(): void;
    updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
    setCurrentAction(action: object): void;
    openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDialog(result?: any): void;
    openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDrawer(result?: any): void;
} & {
    readonly loading: boolean;
} & {
    markFetching: (fetching?: boolean) => void;
    markSaving: (saving?: boolean) => void;
    markBusying: (busying?: boolean) => void;
    fetchInitData: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    fetchData: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    reInitData: (data: object | undefined, replace?: boolean) => void;
    updateMessage: (msg?: string | undefined, error?: boolean) => void;
    clearMessage: () => void;
    saveRemote: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    fetchSchema: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    checkRemote: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
} & {
    readonly loading: boolean;
    readonly items: ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        type: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
        expressionsInOptions: boolean;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly errors: {
        [propName: string]: string[];
    };
    getValueByName(name: string): any;
    getPristineValueByName(name: string): any;
    getItemById(id: string): ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        type: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
        expressionsInOptions: boolean;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    getItemByName(name: string): ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        type: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
        expressionsInOptions: boolean;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    getItemsByName(name: string): ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        type: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
        expressionsInOptions: boolean;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id }: {
            required?: any;
            unique?: any;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[]) => void;
        loadOptions: (api: Api, data?: object | undefined, config?: fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<Payload | null>;
        deferLoadOptions: (option: any, api: Api, data?: object | undefined, config?: fetchOptions | undefined) => Promise<Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly valid: boolean;
    readonly isPristine: boolean;
} & {
    setInited: (value: boolean) => void;
    setValues: (values: object, tag?: object | undefined, replace?: boolean | undefined) => void;
    setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
    trimValues: () => void;
    submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
    validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
    validateFields: (fields: Array<string>) => Promise<boolean>;
    clearErrors: () => void;
    saveRemote: (api: Api, data?: object | undefined, options?: fetchOptions | undefined) => Promise<any>;
    reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
    addFormItem: (item: IFormItemStore) => void;
    removeFormItem: (item: IFormItemStore) => void;
    syncOptions: import("lodash").DebouncedFunc<() => void>;
    setCanAccessSuperData: (value?: boolean) => void;
    deleteValueByName: (name: string) => void;
    getPersistData: () => void;
    setPersistData: import("lodash").DebouncedFunc<() => void>;
    clearPersistData: () => void;
    onChildStoreDispose: (child: IFormItemStore) => void;
    beforeDestroy(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IFormStore = typeof FormStore.Type;
export { IFormItemStore };
