import { SnapshotIn, IAnyModelType } from 'mobx-state-tree';
export declare const Column: import("mobx-state-tree").IModelType<{
    label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    value: import("mobx-state-tree").IType<any, any, any>;
    groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
    toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
    sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
    index: import("mobx-state-tree").IType<number | undefined, number, number>;
    rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
    breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    className: import("mobx-state-tree").IType<string | undefined, string, string>;
}, {
    toggleToggle(): void;
    setToggled(value: boolean): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IColumn = typeof Column.Type;
export declare type SColumn = SnapshotIn<typeof Column>;
export declare const Row: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    key: import("mobx-state-tree").ISimpleType<string>;
    pristine: import("mobx-state-tree").IType<any, any, any>;
    data: import("mobx-state-tree").IType<any, any, any>;
    rowSpans: import("mobx-state-tree").IType<any, any, any>;
    index: import("mobx-state-tree").ISimpleType<number>;
    newIndex: import("mobx-state-tree").ISimpleType<number>;
    expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
    depth: import("mobx-state-tree").ISimpleType<number>;
}, {
    readonly checked: boolean;
    readonly modified: boolean;
    getDataWithModifiedChilden(): any;
    readonly expanded: boolean;
    readonly moved: boolean;
    readonly locals: any;
    readonly checkable: boolean;
    readonly draggable: boolean;
} & {
    toggle(): void;
    toggleExpanded(): void;
    change(values: object, savePristine?: boolean | undefined): void;
    reset(): void;
    setIsHover(value: boolean): void;
    replaceWith(data: any): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IRow = typeof Row.Type;
export declare type SRow = SnapshotIn<typeof Row>;
export declare const TableStore: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    path: import("mobx-state-tree").IType<string | undefined, string, string>;
    storeType: import("mobx-state-tree").ISimpleType<string>;
    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
} & {
    hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
} & {
    columns: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    rows: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    selectedRows: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
    expandedRows: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
    primaryField: import("mobx-state-tree").IType<string | undefined, string, string>;
    orderBy: import("mobx-state-tree").IType<string | undefined, string, string>;
    orderDir: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<"desc" | "asc", "desc" | "asc", "desc" | "asc">, [undefined]>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dragging: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    footable: import("mobx-state-tree").IType<any, any, any>;
    expandConfig: import("mobx-state-tree").IType<any, any, any>;
    isNested: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    columnsTogglable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<boolean | "auto", boolean | "auto", boolean | "auto">, [undefined]>;
    itemCheckableOn: import("mobx-state-tree").IType<string | undefined, string, string>;
    itemDraggableOn: import("mobx-state-tree").IType<string | undefined, string, string>;
    hideCheckToggler: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    combineNum: import("mobx-state-tree").IType<number | undefined, number, number>;
}, {
    readonly parentStore: any;
    readonly __: any;
} & {
    onChildStoreDispose(child: any): void;
    dispose: (callback?: (() => void) | undefined) => void;
    addChildId: (id: string) => void;
    removeChildId: (id: string) => void;
} & {
    initData(data?: object): void;
    reset(): void;
    updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
    setCurrentAction(action: object): void;
    openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDialog(result?: any): void;
    openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDrawer(result?: any): void;
} & {
    readonly filteredColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        isPrimary: boolean;
        searchable: any;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly footableColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        isPrimary: boolean;
        searchable: any;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly leftFixedColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        isPrimary: boolean;
        searchable: any;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly rightFixedColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        isPrimary: boolean;
        searchable: any;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly toggableColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        isPrimary: boolean;
        searchable: any;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly activeToggaleColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        isPrimary: boolean;
        searchable: any;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: string;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly someChecked: boolean;
    readonly allChecked: boolean;
    isSelected: (row: IRow) => boolean;
    readonly allExpanded: boolean;
    isExpanded: (row: IRow) => boolean;
    readonly toggable: boolean;
    readonly modified: number;
    readonly modifiedRows: ({
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        expandable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly unSelectedRows: ({
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        expandable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly checkableRows: ({
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        expandable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly moved: number;
    readonly movedRows: import("mobx-state-tree/dist/internal").ExtractCSTWithSTN<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>[];
    readonly hoverIndex: number;
    getData: (superData: any) => any;
    readonly columnGroup: {
        label: string;
        index: number;
        colSpan: number;
        has: Array<any>;
    }[];
    getRowById(id: string): import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }>> | import("mobx-state-tree").ModelSnapshotType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }> | ({
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        expandable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | null;
} & {
    update: (config: Partial<STableStore>) => void;
    initRows: (rows: Array<any>, getEntryId?: ((entry: any, index: number) => string) | undefined) => void;
    updateSelected: (selected: Array<any>, valueField?: string | undefined) => void;
    toggleAll: () => void;
    toggle: (row: IRow) => void;
    toggleExpandAll: () => void;
    toggleExpanded: (row: IRow) => void;
    collapseAllAtDepth: (depth: number) => void;
    clear: () => void;
    setOrderByInfo: (key: string, direction: 'asc' | 'desc') => void;
    reset: () => void;
    toggleDragging: () => void;
    stopDragging: () => void;
    exchange: (fromIndex: number, toIndex: number, item?: ({
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        expandable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean | undefined): void;
        reset(): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined) => void;
    persistSaveToggledColumns: () => void;
    afterAttach(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type ITableStore = typeof TableStore.Type;
export declare type STableStore = SnapshotIn<typeof TableStore>;
