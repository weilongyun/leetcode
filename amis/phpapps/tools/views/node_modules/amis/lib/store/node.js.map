{
    "version": 3,
    "file": "node.js",
    "sourceRoot": "",
    "sources": [
        "/src/store/node.ts"
    ],
    "names": [],
    "mappings": ";;;AAAA,mDAAwE;AACxE,iCAAqC;AAExB,QAAA,SAAS,GAAG,uBAAK;KAC3B,KAAK,CAAC,WAAW,EAAE;IAClB,EAAE,EAAE,uBAAK,CAAC,UAAU;IACpB,IAAI,EAAE,EAAE;IACR,SAAS,EAAE,uBAAK,CAAC,MAAM;IACvB,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,EAAE;IACZ,WAAW,EAAE,uBAAK,CAAC,QAAQ,CAAC,uBAAK,CAAC,KAAK,CAAC,uBAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;CAC3D,CAAC;KACD,KAAK,CAAC,UAAA,IAAI;IACT,OAAO;QACL,IAAI,WAAW;YACb,OAAO,yBAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ;gBACnC,CAAC,CAAC,oBAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAC7B,CAAC,CAAC,IAAI,CAAC;QACX,CAAC;QAED,IAAI,EAAE;YACJ,OAAO,wBAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC;QAChC,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;KACD,OAAO,CAAC,UAAA,IAAI;IACX,SAAS,UAAU,CAAC,EAAU;QAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAED,SAAS,aAAa,CAAC,EAAU;QAC/B,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,EAAE,EAAX,CAAW,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAEtC,IAAI,CAAC,QAAQ,IAAI,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,SAAS,OAAO,CAAC,QAAqB;;QACpC,cAAc;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACxC,yBAAO,CAAC,IAAI,CAAC,CAAC;YACd,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,GAAK;SACd;aAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YACnC,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;YAChC,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,mBAAmB,+CAA3B,MAAM,EAAwB,IAAI,EAAE;YACpC,yBAAO,CAAC,IAAI,CAAC,CAAC;YACd,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,GAAK;YACb,iBAAiB;SAClB;IACH,CAAC;IAED,OAAO;QACL,mBAAmB,EAAnB,UAAoB,KAAU;YAC5B,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC;QAED,OAAO,SAAA;QACP,UAAU,YAAA;QACV,aAAa,eAAA;KACd,CAAC;AACJ,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "import {types, destroy, isAlive, detach, getEnv} from 'mobx-state-tree';\nimport {getStoreById} from './index';\n\nexport const StoreNode = types\n  .model('StoreNode', {\n    id: types.identifier,\n    path: '',\n    storeType: types.string,\n    disposed: false,\n    parentId: '',\n    childrenIds: types.optional(types.array(types.string), [])\n  })\n  .views(self => {\n    return {\n      get parentStore(): any {\n        return isAlive(self) && self.parentId\n          ? getStoreById(self.parentId)\n          : null;\n      },\n\n      get __() {\n        return getEnv(self).translate;\n      }\n    };\n  })\n  .actions(self => {\n    function addChildId(id: string) {\n      self.childrenIds.push(id);\n    }\n\n    function removeChildId(id: string) {\n      const childrenIds = self.childrenIds.filter(item => item !== id);\n      self.childrenIds.replace(childrenIds);\n\n      self.disposed && dispose();\n    }\n\n    function dispose(callback?: () => void) {\n      // 先标记自己是要销毁的。\n      self.disposed = true;\n\n      if (/(?:dialog|drawer)$/.test(self.path)) {\n        destroy(self);\n        callback?.();\n      } else if (!self.childrenIds.length) {\n        const parent = self.parentStore;\n        parent?.onChildStoreDispose?.(self);\n        destroy(self);\n        callback?.();\n        // destroy(self);\n      }\n    }\n\n    return {\n      onChildStoreDispose(child: any) {\n        removeChildId(child.id);\n      },\n\n      dispose,\n      addChildId,\n      removeChildId\n    };\n  });\n\nexport type IStoreNode = typeof StoreNode.Type;\nexport type SIStoreNode = typeof StoreNode.SnapshotType;\n"
    ]
}