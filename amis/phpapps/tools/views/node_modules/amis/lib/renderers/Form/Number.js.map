{
    "version": 3,
    "file": "Number.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/Number.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAC1B,+BAAmE;AACnE,kEAA4B;AAC5B,uCAAuC;AACvC,qFAAuD;AAuCvD;IAA2C,yCAAiC;IAM1E,uBAAY,KAAkB;QAA9B,YACE,kBAAM,KAAK,CAAC,SAGb;QADC,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACnD,CAAC;IAED,oCAAY,GAAZ,UAAa,UAAe;QACpB,IAAA,KAA0C,IAAI,CAAC,KAAK,EAAtC,EAAE,iBAAA,EAAE,QAAQ,cAAA,EAAE,UAAU,gBAAc,CAAC;QAE3D,QAAQ,CAAC,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC9E,CAAC;IAED,iCAAS,GAAT,UAAU,KAAkC;QAC1C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,KAAK,GAAG,YAAM,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACvC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;SAClE;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,8BAAM,GAAN;QACQ,IAAA,KAUF,IAAI,CAAC,KAAK,EATZ,SAAS,eAAA,EACI,EAAE,iBAAA,EACf,KAAK,WAAA,EACL,IAAI,UAAA,EACJ,SAAS,eAAA,EACT,GAAG,SAAA,EACH,GAAG,SAAA,EACH,QAAQ,cAAA,EACR,WAAW,iBACC,CAAC;QAEf,IAAI,cAAc,GAAQ,EAAE,CAAC;QAE7B,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;YACjC,cAAc,CAAC,SAAS,GAAG,SAAS,CAAC;SACtC;QAED,OAAO,CACL,uCAAK,SAAS,EAAE,oBAAE,CAAI,EAAE,kBAAe,EAAE,SAAS,CAAC;YACjD,8BAAC,qBAAW,IACV,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EACxB,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EACxB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,SAAS,GACpB,CACE,CACP,CAAC;IACJ,CAAC;IA1DM,0BAAY,GAAyB;QAC1C,IAAI,EAAE,CAAC;QACP,UAAU,EAAE,EAAE;KACf,CAAC;IAwDJ,oBAAC;CAAA,AA5DD,CAA2C,eAAK,CAAC,SAAS,GA4DzD;kBA5DoB,aAAa;AAiElC;IAA2C,iDAAa;IAAxD;;IAIA,CAAC;IAHQ,kCAAY,GAA8B;QAC/C,WAAW,EAAE,WAAW;KACzB,CAAC;IAHS,qBAAqB;QAHjC,eAAQ,CAAC;YACR,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,qBAAqB,CAIjC;IAAD,4BAAC;CAAA,AAJD,CAA2C,aAAa,GAIvD;AAJY,sDAAqB",
    "sourcesContent": [
        "import React from 'react';\nimport {FormItem, FormControlProps, FormBaseControl} from './Item';\nimport cx from 'classnames';\nimport {filter} from '../../utils/tpl';\nimport NumberInput from '../../components/NumberInput';\nimport {FormOptionsControl} from './Options';\n\n/**\n * 数字输入框\n * 文档：https://baidu.gitee.io/amis/docs/components/form/number\n */\nexport interface NumberControlSchema extends FormBaseControl {\n  type: 'number';\n\n  /**\n   * 最大值\n   */\n  max?: number;\n\n  /**\n   * 最小值\n   */\n  min?: number;\n\n  /**\n   * 步长\n   */\n  step?: number;\n\n  /**\n   * 精度\n   */\n  precision?: number;\n}\n\nexport interface NumberProps extends FormControlProps {\n  placeholder?: string;\n  max?: number | string;\n  min?: number | string;\n  step?: number;\n  precision?: number;\n}\n\nexport default class NumberControl extends React.Component<NumberProps, any> {\n  static defaultProps: Partial<NumberProps> = {\n    step: 1,\n    resetValue: ''\n  };\n\n  constructor(props: NumberProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(inputValue: any) {\n    const {classPrefix: ns, onChange, resetValue} = this.props;\n\n    onChange(typeof inputValue === 'undefined' ? resetValue || '' : inputValue);\n  }\n\n  filterNum(value: number | string | undefined) {\n    if (typeof value !== 'number') {\n      value = filter(value, this.props.data);\n      value = /^[-]?\\d+/.test(value) ? parseInt(value, 10) : undefined;\n    }\n    return value;\n  }\n\n  render(): JSX.Element {\n    const {\n      className,\n      classPrefix: ns,\n      value,\n      step,\n      precision,\n      max,\n      min,\n      disabled,\n      placeholder\n    } = this.props;\n\n    let precisionProps: any = {};\n\n    if (typeof precision === 'number') {\n      precisionProps.precision = precision;\n    }\n\n    return (\n      <div className={cx(`${ns}NumberControl`, className)}>\n        <NumberInput\n          value={value}\n          step={step}\n          max={this.filterNum(max)}\n          min={this.filterNum(min)}\n          onChange={this.handleChange}\n          disabled={disabled}\n          placeholder={placeholder}\n          precision={precision}\n        />\n      </div>\n    );\n  }\n}\n\n@FormItem({\n  type: 'number'\n})\nexport class NumberControlRenderer extends NumberControl {\n  static defaultProps: Partial<FormControlProps> = {\n    validations: 'isNumeric'\n  };\n}\n"
    ]
}