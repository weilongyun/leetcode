{
    "version": 3,
    "file": "ButtonToolbar.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/ButtonToolbar.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAC1B,+BAAmE;AACnE,kEAA4B;AAkB5B;IAA0C,gDAAmC;IAA7E;;IAuBA,CAAC;IApBC,4CAAa,GAAb;QACQ,IAAA,KAAqC,IAAI,CAAC,KAAK,EAA9C,MAAM,YAAA,EAAe,EAAE,iBAAA,EAAE,OAAO,aAAc,CAAC;QACtD,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;YAC3B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,GAAG;gBACtB,OAAA,MAAM,CAAC,YAAU,GAAK,EAAE,MAAM,EAAE;oBAC9B,GAAG,EAAE,GAAG;iBACT,CAAC;YAFF,CAEE,CACH;YACH,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAED,qCAAM,GAAN;QACQ,IAAA,KAAgD,IAAI,CAAC,KAAK,EAAzD,MAAM,YAAA,EAAE,SAAS,eAAA,EAAe,EAAE,iBAAA,EAAE,OAAO,aAAc,CAAC;QAEjE,OAAO,CACL,uCAAK,SAAS,EAAE,oBAAE,CAAI,EAAE,kBAAe,EAAE,SAAS,CAAC,IAChD,IAAI,CAAC,aAAa,EAAE,CACjB,CACP,CAAC;IACJ,CAAC;IArBM,iCAAY,GAAG,EAAE,CAAC;IAsB3B,2BAAC;CAAA,AAvBD,CAA0C,eAAK,CAAC,SAAS,GAuBxD;AAvBY,oDAAoB;AA8BjC;IAA2C,iDAAoB;IAA/D;;IAAiE,CAAC;IAArD,qBAAqB;QALjC,eAAQ,CAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,WAAW,EAAE,KAAK;YAClB,UAAU,EAAE,KAAK,CAAC,aAAa;SAChC,CAAC;OACW,qBAAqB,CAAgC;IAAD,4BAAC;CAAA,AAAlE,CAA2C,oBAAoB,GAAG;AAArD,sDAAqB",
    "sourcesContent": [
        "import React from 'react';\nimport {FormItem, FormControlProps, FormBaseControl} from './Item';\nimport cx from 'classnames';\nimport {Button} from '../../types';\nimport {ButtonToolbarSchema} from '../ButtonToolbar';\n\n/**\n * 按钮工具栏控件。\n * 文档：https://baidu.gitee.io/amis/docs/components/form/button-toolbar\n */\nexport interface ButtonToolbarControlSchema\n  extends ButtonToolbarSchema,\n    FormBaseControl {\n  type: 'button-toolbar';\n}\n\nexport interface ButtonToolbarProps\n  extends FormControlProps,\n    ButtonToolbarControlSchema {}\n\nexport class ButtonToolbarControl extends React.Component<ButtonToolbarProps> {\n  static defaultProps = {};\n\n  renderButtons() {\n    const {render, classPrefix: ns, buttons} = this.props;\n    return Array.isArray(buttons)\n      ? buttons.map((button, key) =>\n          render(`button/${key}`, button, {\n            key: key\n          })\n        )\n      : null;\n  }\n\n  render() {\n    const {render, className, classPrefix: ns, buttons} = this.props;\n\n    return (\n      <div className={cx(`${ns}ButtonToolbar`, className)}>\n        {this.renderButtons()}\n      </div>\n    );\n  }\n}\n\n@FormItem({\n  type: 'button-toolbar',\n  sizeMutable: false,\n  strictMode: false // data 变化也更新\n})\nexport class ButtonToolbarRenderer extends ButtonToolbarControl {}\n"
    ]
}