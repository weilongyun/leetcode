{
    "version": 3,
    "file": "Switch.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Switch.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAC1B,sCAAmD;AAInD,kEAA4B;AAC5B,wEAA0C;AAC1C,oDAAqD;AA2CrD;IAAiC,uCAAoC;IASnE,qBAAY,KAAkB;QAA9B,YACE,kBAAM,KAAK,CAAC,SAGb;QADC,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACnD,CAAC;IAED,kCAAY,GAAZ,UAAa,OAAgB;;QACrB,IAAA,KAQF,IAAI,CAAC,KAAK,EAPZ,aAAa,mBAAA,EACb,IAAI,UAAA,EACJ,SAAS,eAAA,EACT,UAAU,gBAAA,EACV,eAAe,qBAAA,EACf,QAAQ,cAAA,EACR,QAAQ,cACI,CAAC;QAEf,aAAa;YACX,CAAC,QAAQ;YACT,CAAC,QAAQ;YACT,aAAa;gBAET,GAAC,IAAc,IAAG,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU;qBAEpD,eAAe,CAChB,CAAC;IACN,CAAC;IAED,4BAAM,GAAN;QACQ,IAAA,KAWF,IAAI,CAAC,KAAK,EAVZ,SAAS,eAAA,EACI,EAAE,iBAAA,EACf,WAAW,iBAAA,EACX,SAAS,eAAA,EACT,UAAU,gBAAA,EACV,aAAa,mBAAA,EACb,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,IAAI,UAAA,EACJ,IAAI,UACQ,CAAC;QAEf,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC7B,IAAI,SAAS,GAAoB,CAC/B,wCAAM,SAAS,EAAC,YAAY,IAAE,WAAW,CAAQ,CAClD,CAAC;QACF,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,IAAI,EAAE;YAC5B,KAAK,GAAG,6BAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACrC;QAED,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;YACpB,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,SAAS,GAAG,CACV,8BAAC,gBAAM,IACL,MAAM,QACN,WAAW,EAAE,EAAE,EACf,OAAO,EAAE,KAAK,IAAI,SAAS,EAC3B,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,QAAQ,EAAE,QAAQ,IAAI,CAAC,aAAa,GACpC,CACH,CAAC;SACH;QAED,OAAO,CACL,wCAAM,SAAS,EAAE,oBAAE,CAAI,EAAE,gBAAa,EAAE,SAAS,CAAC;YAC/C,SAAS;YACT,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CACtB,CACR,CAAC;IACJ,CAAC;IA/EM,wBAAY,GAAyB;QAC1C,WAAW,EAAE,GAAG;QAChB,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,KAAK;QACjB,QAAQ,EAAE,IAAI;QACd,eAAe,EAAE,KAAK;KACvB,CAAC;IA0EJ,kBAAC;CAAA,AAjFD,CAAiC,eAAK,CAAC,SAAS,GAiF/C;AAjFY,kCAAW;AAuFxB;IAAyC,+CAAW;IAApD;;IAAsD,CAAC;IAA1C,mBAAmB;QAJ/B,kBAAQ,CAAC;YACR,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,QAAQ;SACf,CAAC;OACW,mBAAmB,CAAuB;IAAD,0BAAC;CAAA,AAAvD,CAAyC,WAAW,GAAG;AAA1C,kDAAmB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {ServiceStore, IServiceStore} from '../store/service';\nimport {Api, SchemaNode, PlainObject} from '../types';\nimport {filter} from '../utils/tpl';\nimport cx from 'classnames';\nimport Switch from '../components/Switch';\nimport {resolveVariable} from '../utils/tpl-builtin';\nimport {BaseSchema} from '../Schema';\n\n/**\n * 开关展示控件。\n * 文档：https://baidu.gitee.io/amis/docs/components/switch\n */\nexport interface SwitchSchema extends BaseSchema {\n  /**\n   * 指定为状态展示控件\n   */\n  type: 'switch';\n\n  /**\n   * 占位符\n   * @default -\n   */\n  placeholder?: string;\n\n  /**\n   * 为真时的值\n   */\n  trueValue?: any;\n\n  /**\n   * 为假时的值\n   */\n  falseValue?: any;\n\n  /**\n   * 默认为只读，要开启编辑请配置这个为 false\n   * @default true\n   */\n  readOnly?: boolean;\n\n  /**\n   * 是否立即保存。关乎到是否立即调用保存接口。\n   */\n  saveImmediately?: boolean;\n}\n\nexport interface SwitchProps extends RendererProps, SwitchSchema {}\n\nexport class SwitchField extends React.Component<SwitchProps, object> {\n  static defaultProps: Partial<SwitchProps> = {\n    placeholder: '-',\n    trueValue: true,\n    falseValue: false,\n    readOnly: true,\n    saveImmediately: false\n  };\n\n  constructor(props: SwitchProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(checked: boolean) {\n    const {\n      onQuickChange,\n      name,\n      trueValue,\n      falseValue,\n      saveImmediately,\n      readOnly,\n      disabled\n    } = this.props;\n\n    onQuickChange &&\n      !readOnly &&\n      !disabled &&\n      onQuickChange(\n        {\n          [name as string]: checked ? trueValue : falseValue\n        },\n        saveImmediately\n      );\n  }\n\n  render() {\n    const {\n      className,\n      classPrefix: ns,\n      placeholder,\n      trueValue,\n      falseValue,\n      onQuickChange,\n      option,\n      disabled,\n      name,\n      data\n    } = this.props;\n\n    let value = this.props.value;\n    let viewValue: React.ReactNode = (\n      <span className=\"text-muted\">{placeholder}</span>\n    );\n    let showOption = false;\n\n    if (value === void 0 && name) {\n      value = resolveVariable(name, data);\n    }\n\n    if (value !== void 0) {\n      showOption = !!option;\n      viewValue = (\n        <Switch\n          inline\n          classPrefix={ns}\n          checked={value == trueValue}\n          onChange={this.handleChange}\n          disabled={disabled || !onQuickChange}\n        />\n      );\n    }\n\n    return (\n      <span className={cx(`${ns}SwitchField`, className)}>\n        {viewValue}\n        {showOption ? option : null}\n      </span>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)switch$/,\n  name: 'switch'\n})\nexport class SwitchFieldRenderer extends SwitchField {}\n"
    ]
}