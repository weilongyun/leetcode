{
    "version": 3,
    "file": "Transfer.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/Transfer.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {\n  OptionsControlProps,\n  OptionsControl,\n  FormOptionsControl\n} from './Options';\nimport React from 'react';\nimport Transfer from '../../components/Transfer';\nimport {Option} from './Options';\nimport {\n  autobind,\n  filterTree,\n  string2regExp,\n  createObject,\n  findTree\n} from '../../utils/helper';\nimport {Api} from '../../types';\nimport Spinner from '../../components/Spinner';\nimport find from 'lodash/find';\nimport {optionValueCompare} from '../../components/Select';\nimport {resolveVariable} from '../../utils/tpl-builtin';\nimport {SchemaApi} from '../../Schema';\n\n/**\n * Transfer\n * 文档：https://baidu.gitee.io/amis/docs/components/form/transfer\n */\nexport interface TransferControlSchema extends FormOptionsControl {\n  type: 'transfer';\n\n  /**\n   * 是否显示剪头\n   */\n  showArrow?: boolean;\n\n  /**\n   * 可排序？\n   */\n  sortable?: boolean;\n\n  /**\n   * 勾选展示模式\n   */\n  selectMode?: 'table' | 'list' | 'tree' | 'chained' | 'associated';\n\n  /**\n   * 当 selectMode 为 associated 时用来定义左侧的选项\n   */\n  leftOptions?: Array<Option>;\n\n  /**\n   * 当 selectMode 为 associated 时用来定义左侧的选择模式\n   */\n  leftMode?: 'tree' | 'list';\n\n  /**\n   * 当 selectMode 为 associated 时用来定义右侧的选择模式\n   */\n  rightMode?: 'table' | 'list' | 'tree' | 'chained';\n\n  /**\n   * 搜索结果展示模式\n   */\n  searchResultMode?: 'table' | 'list' | 'tree' | 'chained';\n\n  /**\n   * 当 selectMode 为 table 时定义表格列信息。\n   */\n  columns?: Array<any>;\n\n  /**\n   * 可搜索？\n   */\n  searchable?: boolean;\n\n  /**\n   * 搜索 API\n   */\n  searchApi?: SchemaApi;\n}\n\nexport interface BaseTransferProps\n  extends OptionsControlProps,\n    Omit<TransferControlSchema, 'type' | 'options'> {}\n\nexport class BaseTransferRenderer<\n  T extends OptionsControlProps = BaseTransferProps\n> extends React.Component<T> {\n  @autobind\n  handleChange(value: Array<Option>) {\n    const {\n      onChange,\n      joinValues,\n      delimiter,\n      valueField,\n      extractValue,\n      options,\n      setOptions\n    } = this.props;\n    let newValue: any = value;\n    let newOptions = options.concat();\n\n    if (Array.isArray(value)) {\n      if (joinValues || extractValue) {\n        newValue = value.map(item => {\n          const resolved = findTree(\n            options,\n            optionValueCompare(\n              item[(valueField as string) || 'value'],\n              (valueField as string) || 'value'\n            )\n          );\n\n          if (!resolved) {\n            newOptions.push(item);\n          }\n\n          return item[(valueField as string) || 'value'];\n        });\n      }\n\n      if (joinValues) {\n        newValue = newValue.join(delimiter || ',');\n      }\n    }\n\n    newOptions.length > options.length && setOptions(newOptions, true);\n    onChange(newValue);\n  }\n\n  @autobind\n  option2value(option: Option) {\n    return option;\n  }\n\n  @autobind\n  async handleSearch(term: string, cancelExecutor: Function) {\n    const {searchApi, options, labelField, valueField, env, data} = this.props;\n\n    if (searchApi) {\n      try {\n        const payload = await env.fetcher(\n          searchApi,\n          createObject(data, {term}),\n          {\n            cancelExecutor\n          }\n        );\n\n        if (!payload.ok) {\n          throw new Error(payload.msg || '搜索请求异常');\n        }\n\n        const result =\n          payload.data.options || payload.data.items || payload.data;\n        if (!Array.isArray(result)) {\n          throw new Error('期望接口返回数组信息');\n        }\n\n        return result.map(item => {\n          let resolved: any = null;\n          const value = item[valueField || 'value'];\n\n          // 只有 value 值有意义的时候，再去找；否则直接返回\n          if (Array.isArray(options) && value !== null && value !== undefined) {\n            resolved = find(options, optionValueCompare(value, valueField));\n          }\n\n          return resolved || item;\n        });\n      } catch (e) {\n        if (!env.isCancel(e)) {\n          env.notify('error', e.message);\n        }\n\n        return [];\n      }\n    } else if (term) {\n      const regexp = string2regExp(term);\n\n      return filterTree(\n        options,\n        (option: Option) => {\n          return !!(\n            (Array.isArray(option.children) && option.children.length) ||\n            regexp.test(option[(labelField as string) || 'label']) ||\n            regexp.test(option[(valueField as string) || 'value'])\n          );\n        },\n        0,\n        true\n      );\n    } else {\n      return options;\n    }\n  }\n\n  @autobind\n  renderCell(\n    column: {\n      name: string;\n      label: string;\n      [propName: string]: any;\n    },\n    option: Option,\n    colIndex: number,\n    rowIndex: number\n  ) {\n    const {render, data} = this.props;\n    return render(\n      `cell/${colIndex}/${rowIndex}`,\n      {\n        type: 'text',\n        ...column\n      },\n      {\n        value: resolveVariable(column.name, option),\n        data: createObject(data, option)\n      }\n    );\n  }\n\n  render() {\n    const {\n      className,\n      classnames: cx,\n      options,\n      selectedOptions,\n      showArrow,\n      sortable,\n      selectMode,\n      columns,\n      loading,\n      searchable,\n      searchResultMode,\n      deferLoad,\n      leftOptions,\n      leftMode,\n      rightMode,\n      disabled\n    } = this.props;\n\n    return (\n      <div className={cx('TransferControl', className)}>\n        <Transfer\n          value={selectedOptions}\n          options={options}\n          disabled={disabled}\n          onChange={this.handleChange}\n          option2value={this.option2value}\n          sortable={sortable}\n          showArrow={showArrow}\n          selectMode={selectMode}\n          searchResultMode={searchResultMode}\n          columns={columns}\n          onSearch={searchable ? this.handleSearch : undefined}\n          onDeferLoad={deferLoad}\n          leftOptions={leftOptions}\n          leftMode={leftMode}\n          rightMode={rightMode}\n          cellRender={this.renderCell}\n        />\n\n        <Spinner overlay key=\"info\" show={loading} />\n      </div>\n    );\n  }\n}\n\n// ts 3.9 里面非得这样才不报错，鬼知道为何。\nexport class TransferRender extends BaseTransferRenderer {}\n\nexport default OptionsControl({\n  type: 'transfer'\n})(TransferRender);\n"
    ]
}