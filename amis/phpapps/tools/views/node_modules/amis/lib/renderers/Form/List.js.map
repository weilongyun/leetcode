{
    "version": 3,
    "file": "List.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/List.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {\n  OptionsControl,\n  OptionsControlProps,\n  Option,\n  FormOptionsControl\n} from './Options';\nimport {Schema} from '../../types';\nimport {createObject, isEmpty} from '../../utils/helper';\nimport {dataMapping} from '../../utils/tpl-builtin';\nimport {SchemaCollection} from '../../Schema';\n\n/**\n * List 复选框\n * 文档：https://baidu.gitee.io/amis/docs/components/form/list\n */\nexport interface ListControlSchema extends FormOptionsControl {\n  type: 'list';\n\n  /**\n   * 开启双击点选并提交。\n   */\n  submitOnDBClick?: boolean;\n\n  /**\n   * 图片div类名\n   */\n  imageClassName?: string;\n\n  /**\n   * 可以自定义展示模板。\n   */\n  itemSchema?: SchemaCollection;\n}\n\nexport interface ListProps\n  extends OptionsControlProps,\n    Omit<ListControlSchema, 'type' | 'options'> {}\n\nexport default class ListControl extends React.Component<ListProps, any> {\n  static propsList = ['itemSchema', 'value', 'renderFormItems'];\n  static defaultProps = {\n    clearable: false,\n    imageClassName: '',\n    submitOnDBClick: false\n  };\n\n  handleDBClick(option: Option, e: React.MouseEvent<HTMLElement>) {\n    this.props.onToggle(option, false, true);\n    this.props.onAction(null, {\n      type: 'submit'\n    });\n  }\n\n  handleClick(option: Option, e: React.MouseEvent<HTMLElement>) {\n    if (e.target && (e.target as HTMLElement).closest('a,button')) {\n      return;\n    }\n\n    const {onToggle, multiple, autoFill, onBulkChange} = this.props;\n\n    const sendTo =\n      !multiple &&\n      autoFill &&\n      !isEmpty(autoFill) &&\n      dataMapping(autoFill, option as Option);\n    sendTo && onBulkChange(sendTo);\n\n    onToggle(option);\n  }\n\n  reload() {\n    const reload = this.props.reloadOptions;\n    reload && reload();\n  }\n\n  render() {\n    const {\n      render,\n      itemClassName,\n      classnames: cx,\n      className,\n      disabled,\n      options,\n      placeholder,\n      selectedOptions,\n      imageClassName,\n      submitOnDBClick,\n      itemSchema,\n      data,\n      labelField\n    } = this.props;\n\n    let body: JSX.Element | null = null;\n\n    if (options && options.length) {\n      body = (\n        <div className={cx('ListControl-items')}>\n          {options.map((option, key) => (\n            <div\n              key={key}\n              className={cx(`ListControl-item`, itemClassName, {\n                'is-active': ~selectedOptions.indexOf(option),\n                'is-disabled': option.disabled || disabled\n              })}\n              onClick={this.handleClick.bind(this, option)}\n              onDoubleClick={\n                submitOnDBClick\n                  ? this.handleDBClick.bind(this, option)\n                  : undefined\n              }\n            >\n              {itemSchema\n                ? render(`${key}/body`, itemSchema, {\n                    data: createObject(data, option)\n                  })\n                : option.body\n                ? render(`${key}/body`, option.body)\n                : [\n                    option.image ? (\n                      <div\n                        key=\"image\"\n                        className={cx('ListControl-itemImage', imageClassName)}\n                      >\n                        <img\n                          src={option.image}\n                          alt={option[labelField || 'label']}\n                        />\n                      </div>\n                    ) : null,\n                    option[labelField || 'label'] ? (\n                      <div key=\"label\" className={cx('ListControl-itemLabel')}>\n                        {String(option[labelField || 'label'])}\n                      </div>\n                    ) : null\n                    // {/* {option.tip ? (<div className={`${ns}ListControl-tip`}>{option.tip}</div>) : null} */}\n                  ]}\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    return (\n      <div className={cx('ListControl', className)}>\n        {body ? (\n          body\n        ) : (\n          <span className={cx('ListControl-placeholder')}>{placeholder}</span>\n        )}\n      </div>\n    );\n  }\n}\n\n@OptionsControl({\n  type: 'list',\n  sizeMutable: false\n})\nexport class ListControlRenderer extends ListControl {}\n"
    ]
}