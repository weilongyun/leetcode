{
    "version": 3,
    "file": "Color.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Color.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA;;GAEG;AACH,wDAA0B;AAC1B,sCAAmD;AAEnD,oDAA8D;AAyB9D;IAAgC,sCAAmC;IAAnE;;IAgCA,CAAC;IAzBC,2BAAM,GAAN;QACQ,IAAA,KAQF,IAAI,CAAC,KAAK,EAPZ,SAAS,eAAA,EACT,IAAI,UAAA,EACQ,EAAE,gBAAA,EACd,IAAI,UAAA,EACJ,KAAK,WAAA,EACL,YAAY,kBAAA,EACZ,SAAS,eACG,CAAC;QACf,IAAM,KAAK,GACT,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,sCAAwB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEzE,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;YACzC,qCACE,SAAS,EAAE,EAAE,CAAC,wBAAwB,CAAC,EACvC,KAAK,EAAE,EAAC,eAAe,EAAE,KAAK,IAAI,YAAY,EAAC,GAC/C;YACD,SAAS,CAAC,CAAC,CAAC,CACX,wCAAM,SAAS,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAG,KAAK,CAAQ,CACxD,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IA9BM,uBAAY,GAAG;QACpB,SAAS,EAAE,EAAE;QACb,YAAY,EAAE,MAAM;QACpB,SAAS,EAAE,IAAI;KAChB,CAAC;IA2BJ,iBAAC;CAAA,AAhCD,CAAgC,eAAK,CAAC,SAAS,GAgC9C;AAhCY,gCAAU;AAsCvB;IAAwC,8CAAU;IAAlD;;IAAoD,CAAC;IAAxC,kBAAkB;QAJ9B,kBAAQ,CAAC;YACR,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,OAAO;SACd,CAAC;OACW,kBAAkB,CAAsB;IAAD,yBAAC;CAAA,AAArD,CAAwC,UAAU,GAAG;AAAxC,gDAAkB",
    "sourcesContent": [
        "/**\n * @file 用来展示颜色块。\n */\nimport React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema} from '../Schema';\nimport {resolveVariableAndFilter} from '../utils/tpl-builtin';\n\n/**\n * Color 显示渲染器，格式说明。\n * 文档：https://baidu.gitee.io/amis/docs/components/color\n */\nexport interface ColorSchema extends BaseSchema {\n  /**\n   *  指定为颜色显示控件\n   */\n  type: 'color';\n\n  /**\n   * 默认颜色\n   */\n  defaultColor?: string;\n\n  /**\n   * 是否用文字显示值。\n   */\n  showValue?: boolean;\n}\n\nexport interface ColorProps extends RendererProps, ColorSchema {}\n\nexport class ColorField extends React.Component<ColorProps, object> {\n  static defaultProps = {\n    className: '',\n    defaultColor: '#ccc',\n    showValue: true\n  };\n\n  render() {\n    const {\n      className,\n      data,\n      classnames: cx,\n      name,\n      value,\n      defaultColor,\n      showValue\n    } = this.props;\n    const color =\n      value || (name ? resolveVariableAndFilter(name, data, '| raw') : null);\n\n    return (\n      <div className={cx('ColorField', className)}>\n        <i\n          className={cx('ColorField-previewIcon')}\n          style={{backgroundColor: color || defaultColor}}\n        />\n        {showValue ? (\n          <span className={cx('ColorField-value')}>{color}</span>\n        ) : null}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)color$/,\n  name: 'color'\n})\nexport class ColorFieldRenderer extends ColorField {}\n"
    ]
}